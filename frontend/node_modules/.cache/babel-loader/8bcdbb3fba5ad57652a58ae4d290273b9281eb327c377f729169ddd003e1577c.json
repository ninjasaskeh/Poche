{"ast":null,"code":"'use client';\n\nimport { jsxs, jsx } from 'react/jsx-runtime';\nimport { useState } from 'react';\nimport { useId, useElementSize } from '@mantine/hooks';\nimport { rem } from '../../core/utils/units-converters/rem.mjs';\nimport { createVarsResolver } from '../../core/styles-api/create-vars-resolver/create-vars-resolver.mjs';\nimport 'clsx';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport '../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport { useStyles } from '../../core/styles-api/use-styles/use-styles.mjs';\nimport { Box } from '../../core/Box/Box.mjs';\nimport { factory } from '../../core/factory/factory.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport { Anchor } from '../Anchor/Anchor.mjs';\nimport classes from './Spoiler.module.css.mjs';\nconst defaultProps = {\n  maxHeight: 100,\n  initialState: false\n};\nconst varsResolver = createVarsResolver((_, _ref) => {\n  let {\n    transitionDuration\n  } = _ref;\n  return {\n    root: {\n      \"--spoiler-transition-duration\": transitionDuration !== void 0 ? `${transitionDuration}ms` : void 0\n    }\n  };\n});\nconst Spoiler = factory((_props, ref) => {\n  const props = useProps(\"Spoiler\", defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    initialState,\n    maxHeight,\n    hideLabel,\n    showLabel,\n    children,\n    controlRef,\n    transitionDuration,\n    id,\n    ...others\n  } = props;\n  const getStyles = useStyles({\n    name: \"Spoiler\",\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver\n  });\n  const _id = useId(id);\n  const regionId = `${_id}-region`;\n  const [show, setShowState] = useState(initialState);\n  const {\n    ref: contentRef,\n    height\n  } = useElementSize();\n  const spoilerMoreContent = show ? hideLabel : showLabel;\n  const spoiler = spoilerMoreContent !== null && maxHeight < height;\n  return /* @__PURE__ */jsxs(Box, {\n    ...getStyles(\"root\"),\n    id: _id,\n    ref,\n    \"data-has-spoiler\": spoiler || void 0,\n    ...others,\n    children: [spoiler && /* @__PURE__ */jsx(Anchor, {\n      component: \"button\",\n      type: \"button\",\n      ref: controlRef,\n      onClick: () => setShowState(opened => !opened),\n      \"aria-expanded\": show,\n      \"aria-controls\": regionId,\n      ...getStyles(\"control\"),\n      children: spoilerMoreContent\n    }), /* @__PURE__ */jsx(\"div\", {\n      ...getStyles(\"content\", {\n        style: {\n          maxHeight: !show ? rem(maxHeight) : height ? rem(height) : void 0\n        }\n      }),\n      \"data-reduce-motion\": true,\n      role: \"region\",\n      id: regionId,\n      children: /* @__PURE__ */jsx(\"div\", {\n        ref: contentRef,\n        children\n      })\n    })]\n  });\n});\nSpoiler.classes = classes;\nSpoiler.displayName = \"@mantine/core/Spoiler\";\nexport { Spoiler };","map":{"version":3,"mappings":"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","names":["defaultProps","maxHeight","initialState","varsResolver","createVarsResolver","_","transitionDuration","root","Spoiler","factory","_props","ref","props","useProps","classNames","className","style","styles","unstyled","vars","hideLabel","showLabel","children","controlRef","id","others","getStyles","useStyles","name","classes","_id","useId","regionId","show","setShowState","useState","contentRef","height","useElementSize","spoilerMoreContent","spoiler","jsxs","Box","jsx","Anchor","component","type","onClick","opened","rem","role","displayName"],"sources":["/Users/tnkuseija/Desktop/poche/frontend/node_modules/@mantine/core/src/components/Spoiler/Spoiler.tsx"],"sourcesContent":["import { useState } from 'react';\nimport { useElementSize, useId } from '@mantine/hooks';\nimport {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  rem,\n  StylesApiProps,\n  useProps,\n  useStyles,\n} from '../../core';\nimport { Anchor } from '../Anchor';\nimport classes from './Spoiler.module.css';\n\nexport type SpoilerStylesNames = 'root' | 'control' | 'content';\nexport type SpoilerCssVariables = {\n  root: '--spoiler-transition-duration';\n};\n\nexport interface SpoilerProps\n  extends BoxProps,\n    StylesApiProps<SpoilerFactory>,\n    ElementProps<'div'> {\n  /** Maximum height of the visible content, when this point is reached spoiler appears, `100` by default */\n  maxHeight?: number;\n\n  /** Label for close spoiler action */\n  hideLabel: React.ReactNode;\n\n  /** Label for open spoiler action */\n  showLabel: React.ReactNode;\n\n  /** Get ref of spoiler toggle button */\n  controlRef?: React.ForwardedRef<HTMLButtonElement>;\n\n  /** Initial spoiler state, true to wrap content in spoiler, false to show content without spoiler, opened state is updated on mount */\n  initialState?: boolean;\n\n  /** Spoiler reveal transition duration in ms, set 0 or null to turn off animation, `200` by default */\n  transitionDuration?: number;\n}\n\nexport type SpoilerFactory = Factory<{\n  props: SpoilerProps;\n  ref: HTMLDivElement;\n  stylesNames: SpoilerStylesNames;\n  vars: SpoilerCssVariables;\n}>;\n\nconst defaultProps: Partial<SpoilerProps> = {\n  maxHeight: 100,\n  initialState: false,\n};\n\nconst varsResolver = createVarsResolver<SpoilerFactory>((_, { transitionDuration }) => ({\n  root: {\n    '--spoiler-transition-duration':\n      transitionDuration !== undefined ? `${transitionDuration}ms` : undefined,\n  },\n}));\n\nexport const Spoiler = factory<SpoilerFactory>((_props, ref) => {\n  const props = useProps('Spoiler', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    initialState,\n    maxHeight,\n    hideLabel,\n    showLabel,\n    children,\n    controlRef,\n    transitionDuration,\n    id,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<SpoilerFactory>({\n    name: 'Spoiler',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  const _id = useId(id);\n  const regionId = `${_id}-region`;\n  const [show, setShowState] = useState(initialState);\n  const { ref: contentRef, height } = useElementSize();\n  const spoilerMoreContent = show ? hideLabel : showLabel;\n  const spoiler = spoilerMoreContent !== null && maxHeight! < height;\n\n  return (\n    <Box\n      {...getStyles('root')}\n      id={_id}\n      ref={ref}\n      data-has-spoiler={spoiler || undefined}\n      {...others}\n    >\n      {spoiler && (\n        <Anchor\n          component=\"button\"\n          type=\"button\"\n          ref={controlRef}\n          onClick={() => setShowState((opened) => !opened)}\n          aria-expanded={show}\n          aria-controls={regionId}\n          {...getStyles('control')}\n        >\n          {spoilerMoreContent}\n        </Anchor>\n      )}\n      <div\n        {...getStyles('content', {\n          style: { maxHeight: !show ? rem(maxHeight) : height ? rem(height) : undefined },\n        })}\n        data-reduce-motion\n        role=\"region\"\n        id={regionId}\n      >\n        <div ref={contentRef}>{children}</div>\n      </div>\n    </Box>\n  );\n});\n\nSpoiler.classes = classes;\nSpoiler.displayName = '@mantine/core/Spoiler';\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}