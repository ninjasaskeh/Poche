{"ast":null,"code":"'use client';\n\nimport { jsxs, jsx } from 'react/jsx-runtime';\nimport { forwardRef, useState } from 'react';\nimport '@mantine/hooks';\nimport 'clsx';\nimport '../../../core/MantineProvider/Mantine.context.mjs';\nimport '../../../core/MantineProvider/default-theme.mjs';\nimport '../../../core/MantineProvider/MantineProvider.mjs';\nimport '../../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport '../../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport { Box } from '../../../core/Box/Box.mjs';\nimport '../../../core/DirectionProvider/DirectionProvider.mjs';\nimport '../../Transition/transitions.mjs';\nimport { Transition } from '../../Transition/Transition.mjs';\nimport { useSliderContext } from '../Slider.context.mjs';\nconst Thumb = forwardRef((_ref, ref) => {\n  let {\n    max,\n    min,\n    value,\n    position,\n    label,\n    dragging,\n    onMouseDown,\n    onKeyDownCapture,\n    labelTransitionProps,\n    labelAlwaysOn,\n    thumbLabel,\n    onFocus,\n    onBlur,\n    showLabelOnHover,\n    isHovered,\n    children = null,\n    disabled\n  } = _ref;\n  const {\n    getStyles\n  } = useSliderContext();\n  const [focused, setFocused] = useState(false);\n  const isVisible = labelAlwaysOn || dragging || focused || showLabelOnHover && isHovered;\n  return /* @__PURE__ */jsxs(Box, {\n    tabIndex: 0,\n    role: \"slider\",\n    \"aria-label\": thumbLabel,\n    \"aria-valuemax\": max,\n    \"aria-valuemin\": min,\n    \"aria-valuenow\": value,\n    ref,\n    __vars: {\n      \"--slider-thumb-offset\": `${position}%`\n    },\n    ...getStyles(\"thumb\", {\n      focusable: true\n    }),\n    mod: {\n      dragging,\n      disabled\n    },\n    onFocus: () => {\n      setFocused(true);\n      typeof onFocus === \"function\" && onFocus();\n    },\n    onBlur: () => {\n      setFocused(false);\n      typeof onBlur === \"function\" && onBlur();\n    },\n    onTouchStart: onMouseDown,\n    onMouseDown,\n    onKeyDownCapture,\n    onClick: event => event.stopPropagation(),\n    children: [children, /* @__PURE__ */jsx(Transition, {\n      mounted: label != null && !!isVisible,\n      transition: \"fade\",\n      duration: 0,\n      ...labelTransitionProps,\n      children: transitionStyles => /* @__PURE__ */jsx(\"div\", {\n        ...getStyles(\"label\", {\n          style: transitionStyles\n        }),\n        children: label\n      })\n    })]\n  });\n});\nThumb.displayName = \"@mantine/core/SliderThumb\";\nexport { Thumb };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;AAMY,MAACA,KAAK,GAAGC,UAAU,CAC7B,OAkBGC,GAAG,KAAK;EAAA,IAlBV;IACCC,GAAG;IACHC,GAAG;IACHC,KAAK;IACLC,QAAQ;IACRC,KAAK;IACLC,QAAQ;IACRC,WAAW;IACXC,gBAAgB;IAChBC,oBAAoB;IACpBC,aAAa;IACbC,UAAU;IACVC,OAAO;IACPC,MAAM;IACNC,gBAAgB;IAChBC,SAAS;IACTC,QAAQ,GAAG,IAAI;IACfC;EACD;EACC,MAAM;IAAEC;EAAS,CAAE,GAAGC,gBAAgB,EAAE;EACxC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGC,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAMC,SAAS,GAAGb,aAAa,IAAIJ,QAAQ,IAAIc,OAAO,IAAIN,gBAAgB,IAAIC,SAAS;EACvF,sBAAuBS,IAAI,CACzBC,GAAG,EACH;IACEC,QAAQ,EAAE,CAAC;IACXC,IAAI,EAAE,QAAQ;IACd,YAAY,EAAEhB,UAAU;IACxB,eAAe,EAAEV,GAAG;IACpB,eAAe,EAAEC,GAAG;IACpB,eAAe,EAAEC,KAAK;IACtBH,GAAG;IACH4B,MAAM,EAAE;MAAE,uBAAuB,EAAG,GAAExB,QAAS;IAAI;IACnD,GAAGc,SAAS,CAAC,OAAO,EAAE;MAAEW,SAAS,EAAE;IAAI,CAAE,CAAC;IAC1CC,GAAG,EAAE;MAAExB,QAAQ;MAAEW;IAAU;IAC3BL,OAAO,EAAE,MAAM;MACbS,UAAU,CAAC,IAAI,CAAC;MAChB,OAAOT,OAAO,KAAK,UAAU,IAAIA,OAAO,EAAE;IAC3C;IACDC,MAAM,EAAE,MAAM;MACZQ,UAAU,CAAC,KAAK,CAAC;MACjB,OAAOR,MAAM,KAAK,UAAU,IAAIA,MAAM,EAAE;IACzC;IACDkB,YAAY,EAAExB,WAAW;IACzBA,WAAW;IACXC,gBAAgB;IAChBwB,OAAO,EAAGC,KAAK,IAAKA,KAAK,CAACC,eAAe,EAAE;IAC3ClB,QAAQ,EAAE,CACRA,QAAQ,EAClB,eAA0BmB,GAAG,CACjBC,UAAU,EACV;MACEC,OAAO,EAAEhC,KAAK,IAAI,IAAI,IAAI,CAAC,CAACkB,SAAS;MACrCe,UAAU,EAAE,MAAM;MAClBC,QAAQ,EAAE,CAAC;MACX,GAAG9B,oBAAoB;MACvBO,QAAQ,EAAGwB,gBAAgB,mBAAqBL,GAAG,CAAC,KAAK,EAAE;QAAE,GAAGjB,SAAS,CAAC,OAAO,EAAE;UAAEuB,KAAK,EAAED;QAAgB,CAAE,CAAC;QAAExB,QAAQ,EAAEX;MAAK,CAAE;IACnI,EACF;EAEJ,EACF;AACF,EACD;AACFP,KAAK,CAAC4C,WAAW,GAAG,2BAA2B","names":["Thumb","forwardRef","ref","max","min","value","position","label","dragging","onMouseDown","onKeyDownCapture","labelTransitionProps","labelAlwaysOn","thumbLabel","onFocus","onBlur","showLabelOnHover","isHovered","children","disabled","getStyles","useSliderContext","focused","setFocused","useState","isVisible","jsxs","Box","tabIndex","role","__vars","focusable","mod","onTouchStart","onClick","event","stopPropagation","jsx","Transition","mounted","transition","duration","transitionStyles","style","displayName"],"sources":["/Users/tnkuseija/Desktop/poche/frontend/node_modules/@mantine/core/src/components/Slider/Thumb/Thumb.tsx"],"sourcesContent":["import { forwardRef, useState } from 'react';\nimport { Box } from '../../../core';\nimport { Transition, TransitionOverride } from '../../Transition';\nimport { useSliderContext } from '../Slider.context';\n\nexport interface ThumbProps {\n  max: number;\n  min: number;\n  value: number;\n  position: number;\n  dragging: boolean;\n  label: React.ReactNode;\n  onKeyDownCapture?: (event: React.KeyboardEvent<HTMLDivElement>) => void;\n  onMouseDown?: (\n    event: React.MouseEvent<HTMLDivElement> | React.TouchEvent<HTMLDivElement>\n  ) => void;\n  labelTransitionProps: TransitionOverride | undefined;\n  labelAlwaysOn: boolean | undefined;\n  thumbLabel: string | undefined;\n  onFocus?: () => void;\n  onBlur?: () => void;\n  showLabelOnHover: boolean | undefined;\n  isHovered?: boolean;\n  children?: React.ReactNode;\n  disabled: boolean | undefined;\n  className?: string;\n  style?: React.CSSProperties;\n}\n\nexport const Thumb = forwardRef<HTMLDivElement, ThumbProps>(\n  (\n    {\n      max,\n      min,\n      value,\n      position,\n      label,\n      dragging,\n      onMouseDown,\n      onKeyDownCapture,\n      labelTransitionProps,\n      labelAlwaysOn,\n      thumbLabel,\n      onFocus,\n      onBlur,\n      showLabelOnHover,\n      isHovered,\n      children = null,\n      disabled,\n    }: ThumbProps,\n    ref\n  ) => {\n    const { getStyles } = useSliderContext();\n\n    const [focused, setFocused] = useState(false);\n\n    const isVisible = labelAlwaysOn || dragging || focused || (showLabelOnHover && isHovered);\n\n    return (\n      <Box<'div'>\n        tabIndex={0}\n        role=\"slider\"\n        aria-label={thumbLabel}\n        aria-valuemax={max}\n        aria-valuemin={min}\n        aria-valuenow={value}\n        ref={ref}\n        __vars={{ '--slider-thumb-offset': `${position}%` }}\n        {...getStyles('thumb', { focusable: true })}\n        mod={{ dragging, disabled }}\n        onFocus={() => {\n          setFocused(true);\n          typeof onFocus === 'function' && onFocus();\n        }}\n        onBlur={() => {\n          setFocused(false);\n          typeof onBlur === 'function' && onBlur();\n        }}\n        onTouchStart={onMouseDown}\n        onMouseDown={onMouseDown}\n        onKeyDownCapture={onKeyDownCapture}\n        onClick={(event) => event.stopPropagation()}\n      >\n        {children}\n        <Transition\n          mounted={label != null && !!isVisible}\n          transition=\"fade\"\n          duration={0}\n          {...labelTransitionProps}\n        >\n          {(transitionStyles) => (\n            <div {...getStyles('label', { style: transitionStyles })}>{label}</div>\n          )}\n        </Transition>\n      </Box>\n    );\n  }\n);\n\nThumb.displayName = '@mantine/core/SliderThumb';\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}