{"ast":null,"code":"'use client';\n\nimport { useEffect } from 'react';\nimport { getHotkeyMatcher } from './parse-hotkey.mjs';\nexport { getHotkeyHandler } from './parse-hotkey.mjs';\nfunction shouldFireEvent(event, tagsToIgnore) {\n  let triggerOnContentEditable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  if (event.target instanceof HTMLElement) {\n    if (triggerOnContentEditable) {\n      return !tagsToIgnore.includes(event.target.tagName);\n    }\n    return !event.target.isContentEditable && !tagsToIgnore.includes(event.target.tagName);\n  }\n  return true;\n}\nfunction useHotkeys(hotkeys) {\n  let tagsToIgnore = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [\"INPUT\", \"TEXTAREA\", \"SELECT\"];\n  let triggerOnContentEditable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  useEffect(() => {\n    const keydownListener = event => {\n      hotkeys.forEach(_ref => {\n        let [hotkey, handler, options = {\n          preventDefault: true\n        }] = _ref;\n        if (getHotkeyMatcher(hotkey)(event) && shouldFireEvent(event, tagsToIgnore, triggerOnContentEditable)) {\n          if (options.preventDefault) {\n            event.preventDefault();\n          }\n          handler(event);\n        }\n      });\n    };\n    document.documentElement.addEventListener(\"keydown\", keydownListener);\n    return () => document.documentElement.removeEventListener(\"keydown\", keydownListener);\n  }, [hotkeys]);\n}\nexport { useHotkeys };","map":{"version":3,"mappings":";;;;;AAIA,SAASA,eAAe,CAACC,KAAK,EAAEC,YAAY,EAAoC;EAAA,IAAlCC,wBAAwB,uEAAG,KAAK;EAC5E,IAAIF,KAAK,CAACG,MAAM,YAAYC,WAAW,EAAE;IACvC,IAAIF,wBAAwB,EAAE;MAC5B,OAAO,CAACD,YAAY,CAACI,QAAQ,CAACL,KAAK,CAACG,MAAM,CAACG,OAAO,CAAC;IACpD;IACD,OAAO,CAACN,KAAK,CAACG,MAAM,CAACI,iBAAiB,IAAI,CAACN,YAAY,CAACI,QAAQ,CAACL,KAAK,CAACG,MAAM,CAACG,OAAO,CAAC;EACvF;EACD,OAAO,IAAI;AACb;AACO,SAASE,UAAU,CAACC,OAAO,EAAoF;EAAA,IAAlFR,YAAY,uEAAG,CAAC,OAAO,EAAE,UAAU,EAAE,QAAQ,CAAC;EAAA,IAAEC,wBAAwB,uEAAG,KAAK;EAClHQ,SAAS,CAAC,MAAM;IACd,MAAMC,eAAe,GAAIX,KAAK,IAAK;MACjCS,OAAO,CAACG,OAAO,CAAC,QAA2D;QAAA,IAA1D,CAACC,MAAM,EAAEC,OAAO,EAAEC,OAAO,GAAG;UAAEC,cAAc,EAAE;QAAI,CAAE,CAAC;QACpE,IAAIC,gBAAgB,CAACJ,MAAM,CAAC,CAACb,KAAK,CAAC,IAAID,eAAe,CAACC,KAAK,EAAEC,YAAY,EAAEC,wBAAwB,CAAC,EAAE;UACrG,IAAIa,OAAO,CAACC,cAAc,EAAE;YAC1BhB,KAAK,CAACgB,cAAc,EAAE;UACvB;UACDF,OAAO,CAACd,KAAK,CAAC;QACf;MACT,CAAO,CAAC;IACR,CAAK;IACDkB,QAAQ,CAACC,eAAe,CAACC,gBAAgB,CAAC,SAAS,EAAET,eAAe,CAAC;IACrE,OAAO,MAAMO,QAAQ,CAACC,eAAe,CAACE,mBAAmB,CAAC,SAAS,EAAEV,eAAe,CAAC;EACzF,CAAG,EAAE,CAACF,OAAO,CAAC,CAAC;AACf","names":["shouldFireEvent","event","tagsToIgnore","triggerOnContentEditable","target","HTMLElement","includes","tagName","isContentEditable","useHotkeys","hotkeys","useEffect","keydownListener","forEach","hotkey","handler","options","preventDefault","getHotkeyMatcher","document","documentElement","addEventListener","removeEventListener"],"sources":["/Users/tnkuseija/Desktop/poche/frontend/node_modules/@mantine/hooks/src/use-hotkeys/use-hotkeys.ts"],"sourcesContent":["import { useEffect } from 'react';\nimport { getHotkeyHandler, getHotkeyMatcher, HotkeyItemOptions } from './parse-hotkey';\n\nexport type { HotkeyItemOptions };\nexport { getHotkeyHandler };\n\nexport type HotkeyItem = [string, (event: KeyboardEvent) => void, HotkeyItemOptions?];\n\nfunction shouldFireEvent(\n  event: KeyboardEvent,\n  tagsToIgnore: string[],\n  triggerOnContentEditable = false\n) {\n  if (event.target instanceof HTMLElement) {\n    if (triggerOnContentEditable) {\n      return !tagsToIgnore.includes(event.target.tagName);\n    }\n\n    return !event.target.isContentEditable && !tagsToIgnore.includes(event.target.tagName);\n  }\n\n  return true;\n}\n\nexport function useHotkeys(\n  hotkeys: HotkeyItem[],\n  tagsToIgnore: string[] = ['INPUT', 'TEXTAREA', 'SELECT'],\n  triggerOnContentEditable = false\n) {\n  useEffect(() => {\n    const keydownListener = (event: KeyboardEvent) => {\n      hotkeys.forEach(([hotkey, handler, options = { preventDefault: true }]) => {\n        if (\n          getHotkeyMatcher(hotkey)(event) &&\n          shouldFireEvent(event, tagsToIgnore, triggerOnContentEditable)\n        ) {\n          if (options.preventDefault) {\n            event.preventDefault();\n          }\n\n          handler(event);\n        }\n      });\n    };\n\n    document.documentElement.addEventListener('keydown', keydownListener);\n    return () => document.documentElement.removeEventListener('keydown', keydownListener);\n  }, [hotkeys]);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}