{"ast":null,"code":"'use client';\n\nimport { useState, useCallback } from 'react';\nfunction getInitialState(initialState, data, value) {\n  let acc = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  data.forEach(node => {\n    acc[node.value] = node.value in initialState ? initialState[node.value] : node.value === value;\n    if (Array.isArray(node.children)) {\n      getInitialState(initialState, node.children, value, acc);\n    }\n  });\n  return acc;\n}\nfunction useTree() {\n  let {\n    initialSelectedState = [],\n    initialExpandedState = {},\n    multiple = false\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const [expandedState, setExpandedState] = useState(initialExpandedState);\n  const [selectedState, setSelectedState] = useState(initialSelectedState);\n  const [anchorNode, setAnchorNode] = useState(null);\n  const initialize = useCallback(data => {\n    setExpandedState(current => getInitialState(current, data, selectedState));\n  }, [selectedState]);\n  const toggleExpanded = useCallback(value => {\n    setExpandedState(current => ({\n      ...current,\n      [value]: !current[value]\n    }));\n  }, []);\n  const collapse = useCallback(value => {\n    setExpandedState(current => ({\n      ...current,\n      [value]: false\n    }));\n  }, []);\n  const expand = useCallback(value => {\n    setExpandedState(current => ({\n      ...current,\n      [value]: true\n    }));\n  }, []);\n  const expandAllNodes = useCallback(() => {\n    setExpandedState(current => {\n      const next = {\n        ...current\n      };\n      Object.keys(next).forEach(key => {\n        next[key] = true;\n      });\n      return next;\n    });\n  }, []);\n  const collapseAllNodes = useCallback(() => {\n    setExpandedState(current => {\n      const next = {\n        ...current\n      };\n      Object.keys(next).forEach(key => {\n        next[key] = false;\n      });\n      return next;\n    });\n  }, []);\n  const toggleSelected = useCallback(value => setSelectedState(current => {\n    if (!multiple) {\n      if (current.includes(value)) {\n        setAnchorNode(null);\n        return [];\n      }\n      setAnchorNode(value);\n      return [value];\n    }\n    if (current.includes(value)) {\n      setAnchorNode(null);\n      return current.filter(item => item !== value);\n    }\n    setAnchorNode(value);\n    return [...current, value];\n  }), []);\n  const select = useCallback(value => {\n    setAnchorNode(value);\n    setSelectedState(current => multiple ? current.includes(value) ? current : [...current, value] : [value]);\n  }, []);\n  const deselect = useCallback(value => {\n    anchorNode === value && setAnchorNode(null);\n    setSelectedState(current => current.filter(item => item !== value));\n  }, []);\n  const clearSelected = useCallback(() => {\n    setSelectedState([]);\n    setAnchorNode(null);\n  }, []);\n  return {\n    multiple,\n    expandedState,\n    selectedState,\n    anchorNode,\n    initialize,\n    toggleExpanded,\n    collapse,\n    expand,\n    expandAllNodes,\n    collapseAllNodes,\n    setExpandedState,\n    toggleSelected,\n    select,\n    deselect,\n    clearSelected,\n    setSelectedState\n  };\n}\nexport { useTree };","map":{"version":3,"mappings":"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","names":["getInitialState","initialState","data","value","acc","forEach","node","Array","isArray","children","useTree","initialSelectedState","initialExpandedState","multiple","expandedState","setExpandedState","useState","selectedState","setSelectedState","anchorNode","setAnchorNode","initialize","useCallback","current","toggleExpanded","collapse","expand","expandAllNodes","next","Object","keys","key","collapseAllNodes","toggleSelected","includes","filter","item","select","deselect","clearSelected"],"sources":["/Users/tnkuseija/Desktop/poche/frontend/node_modules/@mantine/core/src/components/Tree/use-tree.ts"],"sourcesContent":["import { useCallback, useState } from 'react';\nimport type { TreeNodeData } from './Tree';\n\nexport type TreeExpandedState = Record<string, boolean>;\n\nfunction getInitialState(\n  initialState: TreeExpandedState,\n  data: TreeNodeData[],\n  value: string | string[] | undefined,\n  acc: TreeExpandedState = {}\n) {\n  data.forEach((node) => {\n    acc[node.value] = node.value in initialState ? initialState[node.value] : node.value === value;\n\n    if (Array.isArray(node.children)) {\n      getInitialState(initialState, node.children, value, acc);\n    }\n  });\n\n  return acc;\n}\n\nexport interface UseTreeInput {\n  initialExpandedState?: TreeExpandedState;\n  initialSelectedState?: string[];\n  multiple?: boolean;\n}\n\nexport function useTree({\n  initialSelectedState = [],\n  initialExpandedState = {},\n  multiple = false,\n}: UseTreeInput = {}) {\n  const [expandedState, setExpandedState] = useState(initialExpandedState);\n  const [selectedState, setSelectedState] = useState(initialSelectedState);\n  const [anchorNode, setAnchorNode] = useState<string | null>(null);\n\n  const initialize = useCallback(\n    (data: TreeNodeData[]) => {\n      setExpandedState((current) => getInitialState(current, data, selectedState));\n    },\n    [selectedState]\n  );\n\n  const toggleExpanded = useCallback((value: string) => {\n    setExpandedState((current) => ({ ...current, [value]: !current[value] }));\n  }, []);\n\n  const collapse = useCallback((value: string) => {\n    setExpandedState((current) => ({ ...current, [value]: false }));\n  }, []);\n\n  const expand = useCallback((value: string) => {\n    setExpandedState((current) => ({ ...current, [value]: true }));\n  }, []);\n\n  const expandAllNodes = useCallback(() => {\n    setExpandedState((current) => {\n      const next = { ...current };\n      Object.keys(next).forEach((key) => {\n        next[key] = true;\n      });\n\n      return next;\n    });\n  }, []);\n\n  const collapseAllNodes = useCallback(() => {\n    setExpandedState((current) => {\n      const next = { ...current };\n      Object.keys(next).forEach((key) => {\n        next[key] = false;\n      });\n\n      return next;\n    });\n  }, []);\n\n  const toggleSelected = useCallback(\n    (value: string) =>\n      setSelectedState((current) => {\n        if (!multiple) {\n          if (current.includes(value)) {\n            setAnchorNode(null);\n            return [];\n          }\n\n          setAnchorNode(value);\n          return [value];\n        }\n\n        if (current.includes(value)) {\n          setAnchorNode(null);\n          return current.filter((item) => item !== value);\n        }\n\n        setAnchorNode(value);\n\n        return [...current, value];\n      }),\n    []\n  );\n\n  const select = useCallback((value: string) => {\n    setAnchorNode(value);\n    setSelectedState((current) =>\n      multiple ? (current.includes(value) ? current : [...current, value]) : [value]\n    );\n  }, []);\n\n  const deselect = useCallback((value: string) => {\n    anchorNode === value && setAnchorNode(null);\n    setSelectedState((current) => current.filter((item) => item !== value));\n  }, []);\n\n  const clearSelected = useCallback(() => {\n    setSelectedState([]);\n    setAnchorNode(null);\n  }, []);\n\n  return {\n    multiple,\n    expandedState,\n    selectedState,\n    anchorNode,\n    initialize,\n\n    toggleExpanded,\n    collapse,\n    expand,\n    expandAllNodes,\n    collapseAllNodes,\n    setExpandedState,\n\n    toggleSelected,\n    select,\n    deselect,\n    clearSelected,\n    setSelectedState,\n  };\n}\n\nexport type TreeController = ReturnType<typeof useTree>;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}