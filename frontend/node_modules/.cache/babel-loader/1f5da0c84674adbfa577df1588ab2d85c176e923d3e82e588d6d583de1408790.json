{"ast":null,"code":"\"use strict\";\n\n/* Setup comma and leading zeros */\nconst commaFormatter = (nominal, settings) => {\n  if (!nominal) {\n    nominal = settings.replaceZeroDecimals ? '-' : '00';\n  } else {\n    const diffLength = settings.floatingPoint - nominal.length;\n    if (diffLength > 0) {\n      for (let i = 0; i < settings.floatingPoint - nominal.length; i++) {\n        nominal += '0';\n      }\n    } else if (diffLength < 0) {\n      nominal = nominal.slice(0, diffLength);\n    }\n  }\n  return nominal;\n};\n\n/* Place dots every three digit start from the most right */\n\nconst dotsFormatter = (target, settings) => {\n  const angka = target.split('.');\n  const size = angka[0].length;\n  let result = angka[0].split('');\n  for (let i = size - 1; i >= 0; i--) {\n    if ((size - i) % 3 === 0 && i > 0) {\n      result[i] = settings.dot + result[i];\n    }\n  }\n  const angkaDepan = result.join('');\n  if (settings.removeZeroDecimals && !angka[1]) {\n    return angkaDepan;\n  } else {\n    const angkaBelakang = commaFormatter(angka[1] || null, settings);\n    return settings.floatingPoint > 0 ? angkaDepan + settings.decimal + angkaBelakang : angkaDepan;\n  }\n};\n\n/* Append or prepend currency symbol based on formal / informal use */\n\nconst symbolFormatter = (nominal, settings) => {\n  if (settings.symbol === 'Rp') {\n    nominal = settings.formal ? 'Rp' + nominal : 'Rp ' + nominal;\n  } else if (settings.symbol === 'IDR') {\n    nominal = settings.formal ? nominal + ' IDR' : 'IDR ' + nominal;\n  }\n  return nominal;\n};\n\n/* Take 1-3 digit from the left, round the rest with comma, append the unit name */\n\nconst unitFormatter = (target, settings) => {\n  const units = settings.longUnit ? ['ribu', 'juta', 'milyar', 'triliun'] : [settings.k ? 'k' : 'rb', 'jt', 'M', 'T'];\n  const unitIndex = Math.ceil(target.length / 3) - 2;\n  let nominal = null;\n  if (unitIndex >= 0 && unitIndex < 4) {\n    let unit = units[unitIndex];\n    if (settings.spaceBeforeUnit) unit = ' ' + unit;\n    const modDigit = target.length % 3;\n    const sliceIndex = modDigit === 0 ? 3 : modDigit;\n    nominal = target.substr(0, sliceIndex);\n    nominal += (unitIndex >= 0 && settings.floatingPoint > 0 ? settings.decimal : '') + target.substr(sliceIndex, settings.floatingPoint) + unit;\n  } else {\n    nominal = dotsFormatter(target, settings);\n  }\n  return nominal;\n};\nconst defaultSettings = {\n  symbol: 'Rp',\n  // ['Rp', 'IDR', null]\n  formal: true,\n  dot: '.',\n  decimal: ',',\n  floatingPoint: 2,\n  replaceZeroDecimals: false,\n  // Rp100.000,-\n  removeZeroDecimals: false,\n  k: false,\n  // k\n  useUnit: false,\n  // rb, jt, M, T\n  longUnit: false,\n  // ribu, juta, milyar, triliun\n  spaceBeforeUnit: false\n};\nmodule.exports = function toRupiah(target) {\n  let settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  target = typeof target !== \"string\" ? target.toString() : target;\n  settings = Object.assign({}, defaultSettings, settings);\n  return settings.useUnit ? symbolFormatter(unitFormatter(target, settings), settings) : symbolFormatter(dotsFormatter(target, settings), settings);\n};","map":{"version":3,"names":["commaFormatter","nominal","settings","replaceZeroDecimals","diffLength","floatingPoint","length","i","slice","dotsFormatter","target","angka","split","size","result","dot","angkaDepan","join","removeZeroDecimals","angkaBelakang","decimal","symbolFormatter","symbol","formal","unitFormatter","units","longUnit","k","unitIndex","Math","ceil","unit","spaceBeforeUnit","modDigit","sliceIndex","substr","defaultSettings","useUnit","module","exports","toRupiah","toString","Object","assign"],"sources":["/Users/tnkuseija/Desktop/poche/frontend/node_modules/@develoka/angka-rupiah-js/index.js"],"sourcesContent":["\"use strict\"\n\n/* Setup comma and leading zeros */\n\nconst commaFormatter = (nominal, settings) => {\n  if (!nominal) {\n    nominal = settings.replaceZeroDecimals ? '-' : '00'\n  } else {\n    const diffLength = settings.floatingPoint - nominal.length\n    if (diffLength > 0) {\n      for (let i = 0; i < settings.floatingPoint - nominal.length; i++) {\n        nominal += '0'\n      }\n    } else if (diffLength < 0) {\n      nominal = nominal.slice(0, diffLength)\n    }\n  }\n  return nominal\n}\n\n/* Place dots every three digit start from the most right */\n\nconst dotsFormatter = (target, settings) => {\n  const angka = target.split('.')\n  const size  = angka[0].length\n  let result  = angka[0].split('')\n\n  for (let i = size - 1; i >= 0; i--) {\n    if ((size - i) % 3 === 0 && i > 0) {\n      result[i] = settings.dot + result[i]\n    }\n  }\n\n  const angkaDepan = result.join('')\n\n  if (settings.removeZeroDecimals && !angka[1]) {\n    return angkaDepan;\n  } else {\n    const angkaBelakang = commaFormatter(angka[1] || null, settings)\n    return settings.floatingPoint > 0\n      ? angkaDepan + settings.decimal + angkaBelakang\n      : angkaDepan\n  }\n}\n\n/* Append or prepend currency symbol based on formal / informal use */\n\nconst symbolFormatter = (nominal, settings) => {\n  if (settings.symbol === 'Rp') {\n    nominal = settings.formal ? 'Rp' + nominal : 'Rp ' + nominal\n  } else if (settings.symbol === 'IDR') {\n    nominal = settings.formal ? nominal + ' IDR' : 'IDR ' + nominal\n  }\n  return nominal\n}\n\n/* Take 1-3 digit from the left, round the rest with comma, append the unit name */\n\nconst unitFormatter = (target, settings) => {\n  const units = settings.longUnit\n    ? ['ribu', 'juta', 'milyar', 'triliun'] \n    : [settings.k ? 'k' : 'rb', 'jt', 'M', 'T']\n  const unitIndex = Math.ceil(target.length / 3) - 2\n\n  let nominal = null\n\n  if (unitIndex >= 0 && unitIndex < 4) {\n    let unit = units[unitIndex]\n    if (settings.spaceBeforeUnit) unit = ' ' + unit\n\n    const modDigit = target.length % 3\n    const sliceIndex = modDigit === 0 ? 3 : modDigit\n\n    nominal = target.substr(0, sliceIndex)\n    nominal += (unitIndex >= 0 && settings.floatingPoint > 0 ? settings.decimal : '')\n      + target.substr(sliceIndex, settings.floatingPoint)\n      + unit\n  } \n  else {\n    nominal = dotsFormatter(target, settings)\n  }\n\n  return nominal\n}\n\nconst defaultSettings = {\n  symbol: 'Rp', // ['Rp', 'IDR', null]\n  formal: true,\n  dot: '.',\n  decimal: ',',\n  floatingPoint: 2,\n  replaceZeroDecimals: false, // Rp100.000,-\n  removeZeroDecimals: false,\n  k: false, // k\n  useUnit: false, // rb, jt, M, T\n  longUnit: false, // ribu, juta, milyar, triliun\n  spaceBeforeUnit: false\n}\n\nmodule.exports = function toRupiah(target, settings={}) {\n  target = (typeof target !== \"string\") ? target.toString() : target\n  settings = Object.assign({}, defaultSettings, settings)\n\n  return settings.useUnit\n    ? symbolFormatter(unitFormatter(target, settings), settings)\n    : symbolFormatter(dotsFormatter(target, settings), settings)\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}