{"ast":null,"code":"'use client';\n\nimport { useState } from 'react';\nfunction useListState() {\n  let initialValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  const [state, setState] = useState(initialValue);\n  const append = function () {\n    for (var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++) {\n      items[_key] = arguments[_key];\n    }\n    return setState(current => [...current, ...items]);\n  };\n  const prepend = function () {\n    for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      items[_key2] = arguments[_key2];\n    }\n    return setState(current => [...items, ...current]);\n  };\n  const insert = function (index) {\n    for (var _len3 = arguments.length, items = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      items[_key3 - 1] = arguments[_key3];\n    }\n    return setState(current => [...current.slice(0, index), ...items, ...current.slice(index)]);\n  };\n  const apply = fn => setState(current => current.map((item, index) => fn(item, index)));\n  const remove = function () {\n    for (var _len4 = arguments.length, indices = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      indices[_key4] = arguments[_key4];\n    }\n    return setState(current => current.filter((_, index) => !indices.includes(index)));\n  };\n  const pop = () => setState(current => {\n    const cloned = [...current];\n    cloned.pop();\n    return cloned;\n  });\n  const shift = () => setState(current => {\n    const cloned = [...current];\n    cloned.shift();\n    return cloned;\n  });\n  const reorder = _ref => {\n    let {\n      from,\n      to\n    } = _ref;\n    return setState(current => {\n      const cloned = [...current];\n      const item = current[from];\n      cloned.splice(from, 1);\n      cloned.splice(to, 0, item);\n      return cloned;\n    });\n  };\n  const swap = _ref2 => {\n    let {\n      from,\n      to\n    } = _ref2;\n    return setState(current => {\n      const cloned = [...current];\n      const fromItem = cloned[from];\n      const toItem = cloned[to];\n      cloned.splice(to, 1, fromItem);\n      cloned.splice(from, 1, toItem);\n      return cloned;\n    });\n  };\n  const setItem = (index, item) => setState(current => {\n    const cloned = [...current];\n    cloned[index] = item;\n    return cloned;\n  });\n  const setItemProp = (index, prop, value) => setState(current => {\n    const cloned = [...current];\n    cloned[index] = {\n      ...cloned[index],\n      [prop]: value\n    };\n    return cloned;\n  });\n  const applyWhere = (condition, fn) => setState(current => current.map((item, index) => condition(item, index) ? fn(item, index) : item));\n  const filter = fn => {\n    setState(current => current.filter(fn));\n  };\n  return [state, {\n    setState,\n    append,\n    prepend,\n    insert,\n    pop,\n    shift,\n    apply,\n    applyWhere,\n    remove,\n    reorder,\n    swap,\n    setItem,\n    setItemProp,\n    filter\n  }];\n}\nexport { useListState };","map":{"version":3,"mappings":";;;AAEO,SAASA,YAAY,GAAoB;EAAA,IAAnBC,YAAY,uEAAG,EAAE;EAC5C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGC,QAAQ,CAACH,YAAY,CAAC;EAChD,MAAMI,MAAM,GAAG;IAAA,kCAAIC,KAAK;MAALA,KAAK;IAAA;IAAA,OAAKH,QAAQ,CAAEI,OAAO,IAAK,CAAC,GAAGA,OAAO,EAAE,GAAGD,KAAK,CAAC,CAAC;EAAA;EAC1E,MAAME,OAAO,GAAG;IAAA,mCAAIF,KAAK;MAALA,KAAK;IAAA;IAAA,OAAKH,QAAQ,CAAEI,OAAO,IAAK,CAAC,GAAGD,KAAK,EAAE,GAAGC,OAAO,CAAC,CAAC;EAAA;EAC3E,MAAME,MAAM,GAAG,UAACC,KAAK;IAAA,mCAAKJ,KAAK;MAALA,KAAK;IAAA;IAAA,OAAKH,QAAQ,CAAEI,OAAO,IAAK,CAAC,GAAGA,OAAO,CAACI,KAAK,CAAC,CAAC,EAAED,KAAK,CAAC,EAAE,GAAGJ,KAAK,EAAE,GAAGC,OAAO,CAACI,KAAK,CAACD,KAAK,CAAC,CAAC,CAAC;EAAA;EAC1H,MAAME,KAAK,GAAIC,EAAE,IAAKV,QAAQ,CAAEI,OAAO,IAAKA,OAAO,CAACO,GAAG,CAAC,CAACC,IAAI,EAAEL,KAAK,KAAKG,EAAE,CAACE,IAAI,EAAEL,KAAK,CAAC,CAAC,CAAC;EAC1F,MAAMM,MAAM,GAAG;IAAA,mCAAIC,OAAO;MAAPA,OAAO;IAAA;IAAA,OAAKd,QAAQ,CAAEI,OAAO,IAAKA,OAAO,CAACW,MAAM,CAAC,CAACC,CAAC,EAAET,KAAK,KAAK,CAACO,OAAO,CAACG,QAAQ,CAACV,KAAK,CAAC,CAAC,CAAC;EAAA;EAC5G,MAAMW,GAAG,GAAG,MAAMlB,QAAQ,CAAEI,OAAO,IAAK;IACtC,MAAMe,MAAM,GAAG,CAAC,GAAGf,OAAO,CAAC;IAC3Be,MAAM,CAACD,GAAG,EAAE;IACZ,OAAOC,MAAM;EACjB,CAAG,CAAC;EACF,MAAMC,KAAK,GAAG,MAAMpB,QAAQ,CAAEI,OAAO,IAAK;IACxC,MAAMe,MAAM,GAAG,CAAC,GAAGf,OAAO,CAAC;IAC3Be,MAAM,CAACC,KAAK,EAAE;IACd,OAAOD,MAAM;EACjB,CAAG,CAAC;EACF,MAAME,OAAO,GAAG;IAAA,IAAC;MAAEC,IAAI;MAAEC;IAAE,CAAE;IAAA,OAAKvB,QAAQ,CAAEI,OAAO,IAAK;MACtD,MAAMe,MAAM,GAAG,CAAC,GAAGf,OAAO,CAAC;MAC3B,MAAMQ,IAAI,GAAGR,OAAO,CAACkB,IAAI,CAAC;MAC1BH,MAAM,CAACK,MAAM,CAACF,IAAI,EAAE,CAAC,CAAC;MACtBH,MAAM,CAACK,MAAM,CAACD,EAAE,EAAE,CAAC,EAAEX,IAAI,CAAC;MAC1B,OAAOO,MAAM;IACjB,CAAG,CAAC;EAAA;EACF,MAAMM,IAAI,GAAG;IAAA,IAAC;MAAEH,IAAI;MAAEC;IAAE,CAAE;IAAA,OAAKvB,QAAQ,CAAEI,OAAO,IAAK;MACnD,MAAMe,MAAM,GAAG,CAAC,GAAGf,OAAO,CAAC;MAC3B,MAAMsB,QAAQ,GAAGP,MAAM,CAACG,IAAI,CAAC;MAC7B,MAAMK,MAAM,GAAGR,MAAM,CAACI,EAAE,CAAC;MACzBJ,MAAM,CAACK,MAAM,CAACD,EAAE,EAAE,CAAC,EAAEG,QAAQ,CAAC;MAC9BP,MAAM,CAACK,MAAM,CAACF,IAAI,EAAE,CAAC,EAAEK,MAAM,CAAC;MAC9B,OAAOR,MAAM;IACjB,CAAG,CAAC;EAAA;EACF,MAAMS,OAAO,GAAG,CAACrB,KAAK,EAAEK,IAAI,KAAKZ,QAAQ,CAAEI,OAAO,IAAK;IACrD,MAAMe,MAAM,GAAG,CAAC,GAAGf,OAAO,CAAC;IAC3Be,MAAM,CAACZ,KAAK,CAAC,GAAGK,IAAI;IACpB,OAAOO,MAAM;EACjB,CAAG,CAAC;EACF,MAAMU,WAAW,GAAG,CAACtB,KAAK,EAAEuB,IAAI,EAAEC,KAAK,KAAK/B,QAAQ,CAAEI,OAAO,IAAK;IAChE,MAAMe,MAAM,GAAG,CAAC,GAAGf,OAAO,CAAC;IAC3Be,MAAM,CAACZ,KAAK,CAAC,GAAG;MAAE,GAAGY,MAAM,CAACZ,KAAK,CAAC;MAAE,CAACuB,IAAI,GAAGC;IAAK,CAAE;IACnD,OAAOZ,MAAM;EACjB,CAAG,CAAC;EACF,MAAMa,UAAU,GAAG,CAACC,SAAS,EAAEvB,EAAE,KAAKV,QAAQ,CAC3CI,OAAO,IAAKA,OAAO,CAACO,GAAG,CAAC,CAACC,IAAI,EAAEL,KAAK,KAAK0B,SAAS,CAACrB,IAAI,EAAEL,KAAK,CAAC,GAAGG,EAAE,CAACE,IAAI,EAAEL,KAAK,CAAC,GAAGK,IAAI,CAAC,CAC3F;EACD,MAAMG,MAAM,GAAIL,EAAE,IAAK;IACrBV,QAAQ,CAAEI,OAAO,IAAKA,OAAO,CAACW,MAAM,CAACL,EAAE,CAAC,CAAC;EAC7C,CAAG;EACD,OAAO,CACLX,KAAK,EACL;IACEC,QAAQ;IACRE,MAAM;IACNG,OAAO;IACPC,MAAM;IACNY,GAAG;IACHE,KAAK;IACLX,KAAK;IACLuB,UAAU;IACVnB,MAAM;IACNQ,OAAO;IACPI,IAAI;IACJG,OAAO;IACPC,WAAW;IACXd;EACD,EACF;AACH","names":["useListState","initialValue","state","setState","useState","append","items","current","prepend","insert","index","slice","apply","fn","map","item","remove","indices","filter","_","includes","pop","cloned","shift","reorder","from","to","splice","swap","fromItem","toItem","setItem","setItemProp","prop","value","applyWhere","condition"],"sources":["/Users/tnkuseija/Desktop/poche/frontend/node_modules/@mantine/hooks/src/use-list-state/use-list-state.ts"],"sourcesContent":["import { useState } from 'react';\n\nexport interface UseListStateHandlers<T> {\n  setState: React.Dispatch<React.SetStateAction<T[]>>;\n  append: (...items: T[]) => void;\n  prepend: (...items: T[]) => void;\n  insert: (index: number, ...items: T[]) => void;\n  pop: () => void;\n  shift: () => void;\n  apply: (fn: (item: T, index?: number) => T) => void;\n  applyWhere: (\n    condition: (item: T, index: number) => boolean,\n    fn: (item: T, index?: number) => T\n  ) => void;\n  remove: (...indices: number[]) => void;\n  reorder: ({ from, to }: { from: number; to: number }) => void;\n  swap: ({ from, to }: { from: number; to: number }) => void;\n  setItem: (index: number, item: T) => void;\n  setItemProp: <K extends keyof T, U extends T[K]>(index: number, prop: K, value: U) => void;\n  filter: (fn: (item: T, i: number) => boolean) => void;\n}\n\nexport type UseListState<T> = [T[], UseListStateHandlers<T>];\n\nexport function useListState<T>(initialValue: T[] = []): UseListState<T> {\n  const [state, setState] = useState(initialValue);\n\n  const append = (...items: T[]) => setState((current) => [...current, ...items]);\n  const prepend = (...items: T[]) => setState((current) => [...items, ...current]);\n\n  const insert = (index: number, ...items: T[]) =>\n    setState((current) => [...current.slice(0, index), ...items, ...current.slice(index)]);\n\n  const apply = (fn: (item: T, index?: number) => T) =>\n    setState((current) => current.map((item, index) => fn(item, index)));\n\n  const remove = (...indices: number[]) =>\n    setState((current) => current.filter((_, index) => !indices.includes(index)));\n\n  const pop = () =>\n    setState((current) => {\n      const cloned = [...current];\n      cloned.pop();\n      return cloned;\n    });\n\n  const shift = () =>\n    setState((current) => {\n      const cloned = [...current];\n      cloned.shift();\n      return cloned;\n    });\n\n  const reorder = ({ from, to }: { from: number; to: number }) =>\n    setState((current) => {\n      const cloned = [...current];\n      const item = current[from];\n\n      cloned.splice(from, 1);\n      cloned.splice(to, 0, item);\n\n      return cloned;\n    });\n\n  const swap = ({ from, to }: { from: number; to: number }) =>\n    setState((current) => {\n      const cloned = [...current];\n      const fromItem = cloned[from];\n      const toItem = cloned[to];\n\n      cloned.splice(to, 1, fromItem);\n      cloned.splice(from, 1, toItem);\n\n      return cloned;\n    });\n\n  const setItem = (index: number, item: T) =>\n    setState((current) => {\n      const cloned = [...current];\n      cloned[index] = item;\n      return cloned;\n    });\n\n  const setItemProp = <K extends keyof T, U extends T[K]>(index: number, prop: K, value: U) =>\n    setState((current) => {\n      const cloned = [...current];\n      cloned[index] = { ...cloned[index], [prop]: value };\n      return cloned;\n    });\n\n  const applyWhere = (\n    condition: (item: T, index: number) => boolean,\n    fn: (item: T, index?: number) => T\n  ) =>\n    setState((current) =>\n      current.map((item, index) => (condition(item, index) ? fn(item, index) : item))\n    );\n\n  const filter = (fn: (item: T, i: number) => boolean) => {\n    setState((current) => current.filter(fn));\n  };\n\n  return [\n    state,\n    {\n      setState,\n      append,\n      prepend,\n      insert,\n      pop,\n      shift,\n      apply,\n      applyWhere,\n      remove,\n      reorder,\n      swap,\n      setItem,\n      setItemProp,\n      filter,\n    },\n  ];\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}