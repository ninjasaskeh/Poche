{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { forwardRef } from 'react';\nimport { useMergedRef } from '@mantine/hooks';\nimport 'clsx';\nimport '../../../core/MantineProvider/Mantine.context.mjs';\nimport '../../../core/MantineProvider/default-theme.mjs';\nimport '../../../core/MantineProvider/MantineProvider.mjs';\nimport '../../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport '../../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport { Box } from '../../../core/Box/Box.mjs';\nimport '../../../core/DirectionProvider/DirectionProvider.mjs';\nimport { useScrollAreaContext } from '../ScrollArea.context.mjs';\nconst ScrollAreaViewport = forwardRef((_ref, ref) => {\n  let {\n    children,\n    style,\n    ...others\n  } = _ref;\n  const ctx = useScrollAreaContext();\n  const rootRef = useMergedRef(ref, ctx.onViewportChange);\n  return /* @__PURE__ */jsx(Box, {\n    ...others,\n    ref: rootRef,\n    style: {\n      overflowX: ctx.scrollbarXEnabled ? \"scroll\" : \"hidden\",\n      overflowY: ctx.scrollbarYEnabled ? \"scroll\" : \"hidden\",\n      ...style\n    },\n    children: /* @__PURE__ */jsx(\"div\", {\n      style: {\n        minWidth: \"100%\",\n        display: \"table\"\n      },\n      ref: ctx.onContentChange,\n      children\n    })\n  });\n});\nScrollAreaViewport.displayName = \"@mantine/core/ScrollAreaViewport\";\nexport { ScrollAreaViewport };","map":{"version":3,"mappings":";;;;;;;;;;;;;;AAMY,MAACA,kBAAkB,GAAGC,UAAU,CAC1C,OAAiCC,GAAG,KAAK;EAAA,IAAxC;IAAEC,QAAQ;IAAEC,KAAK;IAAE,GAAGC;EAAM,CAAE;EAC7B,MAAMC,GAAG,GAAGC,oBAAoB,EAAE;EAClC,MAAMC,OAAO,GAAGC,YAAY,CAACP,GAAG,EAAEI,GAAG,CAACI,gBAAgB,CAAC;EACvD,sBAAuBC,GAAG,CACxBC,GAAG,EACH;IACE,GAAGP,MAAM;IACTH,GAAG,EAAEM,OAAO;IACZJ,KAAK,EAAE;MACLS,SAAS,EAAEP,GAAG,CAACQ,iBAAiB,GAAG,QAAQ,GAAG,QAAQ;MACtDC,SAAS,EAAET,GAAG,CAACU,iBAAiB,GAAG,QAAQ,GAAG,QAAQ;MACtD,GAAGZ;IACJ;IACDD,QAAQ,EAAkB,kBAAG,CAAC,KAAK,EAAE;MAAEC,KAAK,EAAE;QAAEa,QAAQ,EAAE,MAAM;QAAEC,OAAO,EAAE;MAAS;MAAEhB,GAAG,EAAEI,GAAG,CAACa,eAAe;MAAEhB;IAAQ,CAAE;EAC3H,EACF;AACF,EACD;AACFH,kBAAkB,CAACoB,WAAW,GAAG,kCAAkC","names":["ScrollAreaViewport","forwardRef","ref","children","style","others","ctx","useScrollAreaContext","rootRef","useMergedRef","onViewportChange","jsx","Box","overflowX","scrollbarXEnabled","overflowY","scrollbarYEnabled","minWidth","display","onContentChange","displayName"],"sources":["/Users/tnkuseija/Desktop/poche/frontend/node_modules/@mantine/core/src/components/ScrollArea/ScrollAreaViewport/ScrollAreaViewport.tsx"],"sourcesContent":["import { forwardRef } from 'react';\nimport { useMergedRef } from '@mantine/hooks';\nimport { Box, BoxProps, ElementProps } from '../../../core';\nimport { useScrollAreaContext } from '../ScrollArea.context';\n\nexport interface ScrollAreaViewportProps extends BoxProps, ElementProps<'div'> {}\n\nexport const ScrollAreaViewport = forwardRef<HTMLDivElement, ScrollAreaViewportProps>(\n  ({ children, style, ...others }, ref) => {\n    const ctx = useScrollAreaContext();\n    const rootRef = useMergedRef(ref, ctx.onViewportChange);\n\n    return (\n      <Box\n        {...others}\n        ref={rootRef}\n        style={{\n          overflowX: ctx.scrollbarXEnabled ? 'scroll' : 'hidden',\n          overflowY: ctx.scrollbarYEnabled ? 'scroll' : 'hidden',\n          ...style,\n        }}\n      >\n        <div style={{ minWidth: '100%', display: 'table' }} ref={ctx.onContentChange}>\n          {children}\n        </div>\n      </Box>\n    );\n  }\n);\n\nScrollAreaViewport.displayName = '@mantine/core/ScrollAreaViewport';\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}