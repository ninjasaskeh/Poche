{"ast":null,"code":"'use client';\n\nimport { useState, useRef, useEffect } from 'react';\nfunction useThrottledValue(value, wait) {\n  const [throttledValue, setThrottledValue] = useState(value);\n  const valueRef = useRef(value);\n  const active = useRef(true);\n  const timeoutRef = useRef(-1);\n  useEffect(() => {\n    if (active.current && valueRef.current !== value) {\n      setThrottledValue(value);\n      valueRef.current = value;\n      window.clearTimeout(timeoutRef.current);\n      active.current = false;\n      timeoutRef.current = window.setTimeout(() => {\n        active.current = true;\n      }, wait);\n    }\n  }, [value]);\n  useEffect(() => () => window.clearTimeout(timeoutRef.current), []);\n  return throttledValue;\n}\nexport { useThrottledValue };","map":{"version":3,"mappings":";;;AAEO,SAASA,iBAAiB,CAACC,KAAK,EAAEC,IAAI,EAAE;EAC7C,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGC,QAAQ,CAACJ,KAAK,CAAC;EAC3D,MAAMK,QAAQ,GAAGC,MAAM,CAACN,KAAK,CAAC;EAC9B,MAAMO,MAAM,GAAGD,MAAM,CAAC,IAAI,CAAC;EAC3B,MAAME,UAAU,GAAGF,MAAM,CAAC,CAAC,CAAC,CAAC;EAC7BG,SAAS,CAAC,MAAM;IACd,IAAIF,MAAM,CAACG,OAAO,IAAIL,QAAQ,CAACK,OAAO,KAAKV,KAAK,EAAE;MAChDG,iBAAiB,CAACH,KAAK,CAAC;MACxBK,QAAQ,CAACK,OAAO,GAAGV,KAAK;MACxBW,MAAM,CAACC,YAAY,CAACJ,UAAU,CAACE,OAAO,CAAC;MACvCH,MAAM,CAACG,OAAO,GAAG,KAAK;MACtBF,UAAU,CAACE,OAAO,GAAGC,MAAM,CAACE,UAAU,CAAC,MAAM;QAC3CN,MAAM,CAACG,OAAO,GAAG,IAAI;MACtB,GAAET,IAAI,CAAC;IACT;EACL,CAAG,EAAE,CAACD,KAAK,CAAC,CAAC;EACXS,SAAS,CAAC,MAAM,MAAME,MAAM,CAACC,YAAY,CAACJ,UAAU,CAACE,OAAO,CAAC,EAAE,EAAE,CAAC;EAClE,OAAOR,cAAc;AACvB","names":["useThrottledValue","value","wait","throttledValue","setThrottledValue","useState","valueRef","useRef","active","timeoutRef","useEffect","current","window","clearTimeout","setTimeout"],"sources":["/Users/tnkuseija/Desktop/poche/frontend/node_modules/@mantine/hooks/src/use-throttled-value/use-throttled-value.ts"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\n\nexport function useThrottledValue<T>(value: T, wait: number) {\n  const [throttledValue, setThrottledValue] = useState(value);\n  const valueRef = useRef(value);\n  const active = useRef(true);\n  const timeoutRef = useRef<number>(-1);\n\n  useEffect(() => {\n    if (active.current && valueRef.current !== value) {\n      setThrottledValue(value);\n      valueRef.current = value;\n      window.clearTimeout(timeoutRef.current);\n      active.current = false;\n\n      timeoutRef.current = window.setTimeout(() => {\n        active.current = true;\n      }, wait);\n    }\n  }, [value]);\n\n  useEffect(() => () => window.clearTimeout(timeoutRef.current), []);\n\n  return throttledValue;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}