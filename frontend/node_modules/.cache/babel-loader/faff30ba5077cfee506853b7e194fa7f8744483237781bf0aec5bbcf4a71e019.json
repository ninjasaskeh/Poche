{"ast":null,"code":"'use client';\n\nimport { useCallback } from 'react';\nfunction assignRef(ref, value) {\n  if (typeof ref === \"function\") {\n    ref(value);\n  } else if (typeof ref === \"object\" && ref !== null && \"current\" in ref) {\n    ref.current = value;\n  }\n}\nfunction mergeRefs() {\n  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {\n    refs[_key] = arguments[_key];\n  }\n  return node => {\n    refs.forEach(ref => assignRef(ref, node));\n  };\n}\nfunction useMergedRef() {\n  for (var _len2 = arguments.length, refs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    refs[_key2] = arguments[_key2];\n  }\n  return useCallback(mergeRefs(...refs), refs);\n}\nexport { assignRef, mergeRefs, useMergedRef };","map":{"version":3,"mappings":";;;AAEO,SAASA,SAAS,CAACC,GAAG,EAAEC,KAAK,EAAE;EACpC,IAAI,OAAOD,GAAG,KAAK,UAAU,EAAE;IAC7BA,GAAG,CAACC,KAAK,CAAC;EACd,CAAG,MAAM,IAAI,OAAOD,GAAG,KAAK,QAAQ,IAAIA,GAAG,KAAK,IAAI,IAAI,SAAS,IAAIA,GAAG,EAAE;IACtEA,GAAG,CAACE,OAAO,GAAGD,KAAK;EACpB;AACH;AACO,SAASE,SAAS,GAAU;EAAA,kCAANC,IAAI;IAAJA,IAAI;EAAA;EAC/B,OAAQC,IAAI,IAAK;IACfD,IAAI,CAACE,OAAO,CAAEN,GAAG,IAAKD,SAAS,CAACC,GAAG,EAAEK,IAAI,CAAC,CAAC;EAC/C,CAAG;AACH;AACO,SAASE,YAAY,GAAU;EAAA,mCAANH,IAAI;IAAJA,IAAI;EAAA;EAClC,OAAOI,WAAW,CAACL,SAAS,CAAC,GAAGC,IAAI,CAAC,EAAEA,IAAI,CAAC;AAC9C","names":["assignRef","ref","value","current","mergeRefs","refs","node","forEach","useMergedRef","useCallback"],"sources":["/Users/tnkuseija/Desktop/poche/frontend/node_modules/@mantine/hooks/src/use-merged-ref/use-merged-ref.ts"],"sourcesContent":["import { Ref, useCallback } from 'react';\n\ntype PossibleRef<T> = Ref<T> | undefined;\n\nexport function assignRef<T>(ref: PossibleRef<T>, value: T) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (typeof ref === 'object' && ref !== null && 'current' in ref) {\n    (ref as React.MutableRefObject<T>).current = value;\n  }\n}\n\nexport function mergeRefs<T>(...refs: PossibleRef<T>[]) {\n  return (node: T | null) => {\n    refs.forEach((ref) => assignRef(ref, node));\n  };\n}\n\nexport function useMergedRef<T>(...refs: PossibleRef<T>[]) {\n  return useCallback(mergeRefs(...refs), refs);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}