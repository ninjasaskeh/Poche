{"ast":null,"code":"'use client';\n\nimport { useState, useRef, useCallback, useEffect } from 'react';\nfunction useThrottledState(defaultValue, wait) {\n  const [value, setValue] = useState(defaultValue);\n  const timeoutRef = useRef(null);\n  const active = useRef(true);\n  const clearTimeout = () => window.clearTimeout(timeoutRef.current);\n  const throttledSetValue = useCallback(newValue => {\n    if (active.current) {\n      setValue(newValue);\n      clearTimeout();\n      active.current = false;\n      timeoutRef.current = window.setTimeout(() => {\n        active.current = true;\n      }, wait);\n    }\n  }, [wait]);\n  useEffect(() => clearTimeout, []);\n  return [value, throttledSetValue];\n}\nexport { useThrottledState };","map":{"version":3,"mappings":";;;AAEO,SAASA,iBAAiB,CAACC,YAAY,EAAEC,IAAI,EAAE;EACpD,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGC,QAAQ,CAACJ,YAAY,CAAC;EAChD,MAAMK,UAAU,GAAGC,MAAM,CAAC,IAAI,CAAC;EAC/B,MAAMC,MAAM,GAAGD,MAAM,CAAC,IAAI,CAAC;EAC3B,MAAME,YAAY,GAAG,MAAMC,MAAM,CAACD,YAAY,CAACH,UAAU,CAACK,OAAO,CAAC;EAClE,MAAMC,iBAAiB,GAAGC,WAAW,CAClCC,QAAQ,IAAK;IACZ,IAAIN,MAAM,CAACG,OAAO,EAAE;MAClBP,QAAQ,CAACU,QAAQ,CAAC;MAClBL,YAAY,EAAE;MACdD,MAAM,CAACG,OAAO,GAAG,KAAK;MACtBL,UAAU,CAACK,OAAO,GAAGD,MAAM,CAACK,UAAU,CAAC,MAAM;QAC3CP,MAAM,CAACG,OAAO,GAAG,IAAI;MACtB,GAAET,IAAI,CAAC;IACT;EACF,GACD,CAACA,IAAI,CAAC,CACP;EACDc,SAAS,CAAC,MAAMP,YAAY,EAAE,EAAE,CAAC;EACjC,OAAO,CAACN,KAAK,EAAES,iBAAiB,CAAC;AACnC","names":["useThrottledState","defaultValue","wait","value","setValue","useState","timeoutRef","useRef","active","clearTimeout","window","current","throttledSetValue","useCallback","newValue","setTimeout","useEffect"],"sources":["/Users/tnkuseija/Desktop/poche/frontend/node_modules/@mantine/hooks/src/use-throttled-state/use-throttled-state.ts"],"sourcesContent":["import { SetStateAction, useCallback, useEffect, useRef, useState } from 'react';\n\nexport function useThrottledState<T = any>(defaultValue: T, wait: number) {\n  const [value, setValue] = useState(defaultValue);\n  const timeoutRef = useRef<number | null>(null);\n  const active = useRef(true);\n\n  const clearTimeout = () => window.clearTimeout(timeoutRef.current!);\n\n  const throttledSetValue = useCallback(\n    (newValue: SetStateAction<T>) => {\n      if (active.current) {\n        setValue(newValue);\n        clearTimeout();\n        active.current = false;\n\n        timeoutRef.current = window.setTimeout(() => {\n          active.current = true;\n        }, wait);\n      }\n    },\n    [wait]\n  );\n\n  useEffect(() => clearTimeout, []);\n\n  return [value, throttledSetValue] as const;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}