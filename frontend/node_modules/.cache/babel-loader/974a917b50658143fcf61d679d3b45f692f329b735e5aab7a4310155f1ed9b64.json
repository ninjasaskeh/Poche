{"ast":null,"code":"'use client';\n\nimport { getThumbSize } from './get-thumb-size.mjs';\nimport { linearScale } from './linear-scale.mjs';\nfunction clamp(value, _ref) {\n  let [min, max] = _ref;\n  return Math.min(max, Math.max(min, value));\n}\nfunction getThumbOffsetFromScroll(scrollPos, sizes) {\n  let dir = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"ltr\";\n  const thumbSizePx = getThumbSize(sizes);\n  const scrollbarPadding = sizes.scrollbar.paddingStart + sizes.scrollbar.paddingEnd;\n  const scrollbar = sizes.scrollbar.size - scrollbarPadding;\n  const maxScrollPos = sizes.content - sizes.viewport;\n  const maxThumbPos = scrollbar - thumbSizePx;\n  const scrollClampRange = dir === \"ltr\" ? [0, maxScrollPos] : [maxScrollPos * -1, 0];\n  const scrollWithoutMomentum = clamp(scrollPos, scrollClampRange);\n  const interpolate = linearScale([0, maxScrollPos], [0, maxThumbPos]);\n  return interpolate(scrollWithoutMomentum);\n}\nexport { getThumbOffsetFromScroll };","map":{"version":3,"mappings":";;;;AAGA,SAASA,KAAK,CAACC,KAAK,QAAc;EAAA,IAAZ,CAACC,GAAG,EAAEC,GAAG,CAAC;EAC9B,OAAOC,IAAI,CAACF,GAAG,CAACC,GAAG,EAAEC,IAAI,CAACD,GAAG,CAACD,GAAG,EAAED,KAAK,CAAC,CAAC;AAC5C;AACO,SAASI,wBAAwB,CAACC,SAAS,EAAEC,KAAK,EAAe;EAAA,IAAbC,GAAG,uEAAG,KAAK;EACpE,MAAMC,WAAW,GAAGC,YAAY,CAACH,KAAK,CAAC;EACvC,MAAMI,gBAAgB,GAAGJ,KAAK,CAACK,SAAS,CAACC,YAAY,GAAGN,KAAK,CAACK,SAAS,CAACE,UAAU;EAClF,MAAMF,SAAS,GAAGL,KAAK,CAACK,SAAS,CAACG,IAAI,GAAGJ,gBAAgB;EACzD,MAAMK,YAAY,GAAGT,KAAK,CAACU,OAAO,GAAGV,KAAK,CAACW,QAAQ;EACnD,MAAMC,WAAW,GAAGP,SAAS,GAAGH,WAAW;EAC3C,MAAMW,gBAAgB,GAAGZ,GAAG,KAAK,KAAK,GAAG,CAAC,CAAC,EAAEQ,YAAY,CAAC,GAAG,CAACA,YAAY,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;EACnF,MAAMK,qBAAqB,GAAGrB,KAAK,CAACM,SAAS,EAAEc,gBAAgB,CAAC;EAChE,MAAME,WAAW,GAAGC,WAAW,CAAC,CAAC,CAAC,EAAEP,YAAY,CAAC,EAAE,CAAC,CAAC,EAAEG,WAAW,CAAC,CAAC;EACpE,OAAOG,WAAW,CAACD,qBAAqB,CAAC;AAC3C","names":["clamp","value","min","max","Math","getThumbOffsetFromScroll","scrollPos","sizes","dir","thumbSizePx","getThumbSize","scrollbarPadding","scrollbar","paddingStart","paddingEnd","size","maxScrollPos","content","viewport","maxThumbPos","scrollClampRange","scrollWithoutMomentum","interpolate","linearScale"],"sources":["/Users/tnkuseija/Desktop/poche/frontend/node_modules/@mantine/core/src/components/ScrollArea/utils/get-thumb-offset-from-scroll.ts"],"sourcesContent":["import type { Sizes } from '../ScrollArea.types';\nimport { getThumbSize } from './get-thumb-size';\nimport { linearScale } from './linear-scale';\n\nfunction clamp(value: number, [min, max]: [number, number]): number {\n  return Math.min(max, Math.max(min, value));\n}\n\nexport function getThumbOffsetFromScroll(\n  scrollPos: number,\n  sizes: Sizes,\n  dir: 'rtl' | 'ltr' = 'ltr'\n) {\n  const thumbSizePx = getThumbSize(sizes);\n  const scrollbarPadding = sizes.scrollbar.paddingStart + sizes.scrollbar.paddingEnd;\n  const scrollbar = sizes.scrollbar.size - scrollbarPadding;\n  const maxScrollPos = sizes.content - sizes.viewport;\n  const maxThumbPos = scrollbar - thumbSizePx;\n  const scrollClampRange = dir === 'ltr' ? [0, maxScrollPos] : [maxScrollPos * -1, 0];\n  const scrollWithoutMomentum = clamp(scrollPos, scrollClampRange as [number, number]);\n  const interpolate = linearScale([0, maxScrollPos], [0, maxThumbPos]);\n  return interpolate(scrollWithoutMomentum);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}