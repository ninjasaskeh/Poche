{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { keys } from '../../core/utils/keys/keys.mjs';\nimport { filterProps } from '../../core/utils/filter-props/filter-props.mjs';\nimport 'react';\nimport { getSpacing } from '../../core/utils/get-size/get-size.mjs';\nimport { getSortedBreakpoints } from '../../core/utils/get-sorted-breakpoints/get-sorted-breakpoints.mjs';\nimport { getBaseValue } from '../../core/utils/get-base-value/get-base-value.mjs';\nimport '@mantine/hooks';\nimport 'clsx';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport { useMantineTheme } from '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport '../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport { InlineStyles } from '../../core/InlineStyles/InlineStyles.mjs';\nimport '../../core/Box/Box.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nfunction SimpleGridVariables(_ref) {\n  let {\n    spacing,\n    verticalSpacing,\n    cols,\n    selector\n  } = _ref;\n  const theme = useMantineTheme();\n  const _verticalSpacing = verticalSpacing === void 0 ? spacing : verticalSpacing;\n  const baseStyles = filterProps({\n    \"--sg-spacing-x\": getSpacing(getBaseValue(spacing)),\n    \"--sg-spacing-y\": getSpacing(getBaseValue(_verticalSpacing)),\n    \"--sg-cols\": getBaseValue(cols)?.toString()\n  });\n  const queries = keys(theme.breakpoints).reduce((acc, breakpoint) => {\n    if (!acc[breakpoint]) {\n      acc[breakpoint] = {};\n    }\n    if (typeof spacing === \"object\" && spacing[breakpoint] !== void 0) {\n      acc[breakpoint][\"--sg-spacing-x\"] = getSpacing(spacing[breakpoint]);\n    }\n    if (typeof _verticalSpacing === \"object\" && _verticalSpacing[breakpoint] !== void 0) {\n      acc[breakpoint][\"--sg-spacing-y\"] = getSpacing(_verticalSpacing[breakpoint]);\n    }\n    if (typeof cols === \"object\" && cols[breakpoint] !== void 0) {\n      acc[breakpoint][\"--sg-cols\"] = cols[breakpoint];\n    }\n    return acc;\n  }, {});\n  const sortedBreakpoints = getSortedBreakpoints(keys(queries), theme).filter(breakpoint => keys(queries[breakpoint.value]).length > 0);\n  const media = sortedBreakpoints.map(breakpoint => ({\n    query: `(min-width: ${theme.breakpoints[breakpoint.value]})`,\n    styles: queries[breakpoint.value]\n  }));\n  return /* @__PURE__ */jsx(InlineStyles, {\n    styles: baseStyles,\n    media,\n    selector\n  });\n}\nexport { SimpleGridVariables };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AAWO,SAASA,mBAAmB,OAKhC;EAAA,IALiC;IAClCC,OAAO;IACPC,eAAe;IACfC,IAAI;IACJC;EACF,CAAC;EACC,MAAMC,KAAK,GAAGC,eAAe,EAAE;EAC/B,MAAMC,gBAAgB,GAAGL,eAAe,KAAK,KAAK,CAAC,GAAGD,OAAO,GAAGC,eAAe;EAC/E,MAAMM,UAAU,GAAGC,WAAW,CAAC;IAC7B,gBAAgB,EAAEC,UAAU,CAACC,YAAY,CAACV,OAAO,CAAC,CAAC;IACnD,gBAAgB,EAAES,UAAU,CAACC,YAAY,CAACJ,gBAAgB,CAAC,CAAC;IAC5D,WAAW,EAAEI,YAAY,CAACR,IAAI,CAAC,EAAES,QAAQ;EAC7C,CAAG,CAAC;EACF,MAAMC,OAAO,GAAGC,IAAI,CAACT,KAAK,CAACU,WAAW,CAAC,CAACC,MAAM,CAC5C,CAACC,GAAG,EAAEC,UAAU,KAAK;IACnB,IAAI,CAACD,GAAG,CAACC,UAAU,CAAC,EAAE;MACpBD,GAAG,CAACC,UAAU,CAAC,GAAG,EAAE;IACrB;IACD,IAAI,OAAOjB,OAAO,KAAK,QAAQ,IAAIA,OAAO,CAACiB,UAAU,CAAC,KAAK,KAAK,CAAC,EAAE;MACjED,GAAG,CAACC,UAAU,CAAC,CAAC,gBAAgB,CAAC,GAAGR,UAAU,CAACT,OAAO,CAACiB,UAAU,CAAC,CAAC;IACpE;IACD,IAAI,OAAOX,gBAAgB,KAAK,QAAQ,IAAIA,gBAAgB,CAACW,UAAU,CAAC,KAAK,KAAK,CAAC,EAAE;MACnFD,GAAG,CAACC,UAAU,CAAC,CAAC,gBAAgB,CAAC,GAAGR,UAAU,CAACH,gBAAgB,CAACW,UAAU,CAAC,CAAC;IAC7E;IACD,IAAI,OAAOf,IAAI,KAAK,QAAQ,IAAIA,IAAI,CAACe,UAAU,CAAC,KAAK,KAAK,CAAC,EAAE;MAC3DD,GAAG,CAACC,UAAU,CAAC,CAAC,WAAW,CAAC,GAAGf,IAAI,CAACe,UAAU,CAAC;IAChD;IACD,OAAOD,GAAG;EACX,GACD,CAAE,EACH;EACD,MAAME,iBAAiB,GAAGC,oBAAoB,CAACN,IAAI,CAACD,OAAO,CAAC,EAAER,KAAK,CAAC,CAACgB,MAAM,CACxEH,UAAU,IAAKJ,IAAI,CAACD,OAAO,CAACK,UAAU,CAACI,KAAK,CAAC,CAAC,CAACC,MAAM,GAAG,CAAC,CAC3D;EACD,MAAMC,KAAK,GAAGL,iBAAiB,CAACM,GAAG,CAAEP,UAAU,KAAM;IACnDQ,KAAK,EAAG,eAAcrB,KAAK,CAACU,WAAW,CAACG,UAAU,CAACI,KAAK,CAAE,GAAE;IAC5DK,MAAM,EAAEd,OAAO,CAACK,UAAU,CAACI,KAAK;EACjC,EAAC,CAAC;EACH,OAAuB,kBAAG,CAACM,YAAY,EAAE;IAAED,MAAM,EAAEnB,UAAU;IAAEgB,KAAK;IAAEpB;EAAQ,CAAE,CAAC;AACnF","names":["SimpleGridVariables","spacing","verticalSpacing","cols","selector","theme","useMantineTheme","_verticalSpacing","baseStyles","filterProps","getSpacing","getBaseValue","toString","queries","keys","breakpoints","reduce","acc","breakpoint","sortedBreakpoints","getSortedBreakpoints","filter","value","length","media","map","query","styles","InlineStyles"],"sources":["/Users/tnkuseija/Desktop/poche/frontend/node_modules/@mantine/core/src/components/SimpleGrid/SimpleGridVariables.tsx"],"sourcesContent":["import {\n  filterProps,\n  getBaseValue,\n  getSortedBreakpoints,\n  getSpacing,\n  InlineStyles,\n  keys,\n  MantineBreakpoint,\n  useMantineTheme,\n} from '../../core';\nimport type { SimpleGridProps } from './SimpleGrid';\n\ninterface SimpleGridVariablesProps extends SimpleGridProps {\n  selector: string;\n}\n\nexport function SimpleGridVariables({\n  spacing,\n  verticalSpacing,\n  cols,\n  selector,\n}: SimpleGridVariablesProps) {\n  const theme = useMantineTheme();\n  const _verticalSpacing = verticalSpacing === undefined ? spacing : verticalSpacing;\n\n  const baseStyles: Record<string, string | undefined> = filterProps({\n    '--sg-spacing-x': getSpacing(getBaseValue(spacing)),\n    '--sg-spacing-y': getSpacing(getBaseValue(_verticalSpacing)),\n    '--sg-cols': getBaseValue(cols)?.toString(),\n  });\n\n  const queries = keys(theme.breakpoints).reduce<Record<string, Record<string, any>>>(\n    (acc, breakpoint) => {\n      if (!acc[breakpoint]) {\n        acc[breakpoint] = {};\n      }\n\n      if (typeof spacing === 'object' && spacing[breakpoint] !== undefined) {\n        acc[breakpoint]['--sg-spacing-x'] = getSpacing(spacing[breakpoint]);\n      }\n\n      if (typeof _verticalSpacing === 'object' && _verticalSpacing[breakpoint] !== undefined) {\n        acc[breakpoint]['--sg-spacing-y'] = getSpacing(_verticalSpacing[breakpoint]);\n      }\n\n      if (typeof cols === 'object' && cols[breakpoint] !== undefined) {\n        acc[breakpoint]['--sg-cols'] = cols[breakpoint];\n      }\n\n      return acc;\n    },\n    {}\n  );\n\n  const sortedBreakpoints = getSortedBreakpoints(keys(queries), theme).filter(\n    (breakpoint) => keys(queries[breakpoint.value]).length > 0\n  );\n\n  const media = sortedBreakpoints.map((breakpoint) => ({\n    query: `(min-width: ${theme.breakpoints[breakpoint.value as MantineBreakpoint]})`,\n    styles: queries[breakpoint.value],\n  }));\n\n  return <InlineStyles styles={baseStyles} media={media} selector={selector} />;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}