{"ast":null,"code":"'use client';\n\nimport { jsx, jsxs, Fragment } from 'react/jsx-runtime';\nimport { useId, useUncontrolled } from '@mantine/hooks';\nimport 'react';\nimport 'clsx';\nimport { useResolvedStylesApi } from '../../core/styles-api/use-resolved-styles-api/use-resolved-styles-api.mjs';\nimport { useStyles } from '../../core/styles-api/use-styles/use-styles.mjs';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport '../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport { extractStyleProps } from '../../core/Box/style-props/extract-style-props/extract-style-props.mjs';\nimport '../../core/Box/Box.mjs';\nimport { factory } from '../../core/factory/factory.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport { getParsedComboboxData } from '../Combobox/get-parsed-combobox-data/get-parsed-combobox-data.mjs';\nimport { getOptionsLockup } from '../Combobox/get-options-lockup/get-options-lockup.mjs';\nimport '../Combobox/ComboboxChevron/ComboboxChevron.mjs';\nimport { Combobox } from '../Combobox/Combobox.mjs';\nimport '../Combobox/ComboboxDropdown/ComboboxDropdown.mjs';\nimport '../Combobox/ComboboxOptions/ComboboxOptions.mjs';\nimport '../Combobox/ComboboxOption/ComboboxOption.mjs';\nimport '../Combobox/ComboboxTarget/ComboboxTarget.mjs';\nimport '../Combobox/ComboboxSearch/ComboboxSearch.mjs';\nimport '../Combobox/ComboboxEmpty/ComboboxEmpty.mjs';\nimport '../Combobox/ComboboxFooter/ComboboxFooter.mjs';\nimport '../Combobox/ComboboxHeader/ComboboxHeader.mjs';\nimport '../Combobox/ComboboxEventsTarget/ComboboxEventsTarget.mjs';\nimport '../Combobox/ComboboxDropdownTarget/ComboboxDropdownTarget.mjs';\nimport '../Combobox/ComboboxGroup/ComboboxGroup.mjs';\nimport '../Combobox/ComboboxClearButton/ComboboxClearButton.mjs';\nimport '../Combobox/ComboboxHiddenInput/ComboboxHiddenInput.mjs';\nimport { OptionsDropdown } from '../Combobox/OptionsDropdown/OptionsDropdown.mjs';\nimport { useCombobox } from '../Combobox/use-combobox/use-combobox.mjs';\nimport '../Combobox/Combobox.context.mjs';\nimport { InputBase } from '../InputBase/InputBase.mjs';\nimport { Pill } from '../Pill/Pill.mjs';\nimport '../Pill/PillGroup/PillGroup.mjs';\nimport { PillsInput } from '../PillsInput/PillsInput.mjs';\nimport '../PillsInput/PillsInputField/PillsInputField.mjs';\nimport { filterPickedTags } from './filter-picked-tags.mjs';\nimport { getSplittedTags } from './get-splitted-tags.mjs';\nconst defaultProps = {\n  maxTags: Infinity,\n  allowDuplicates: false,\n  splitChars: [\",\"],\n  hiddenInputValuesDivider: \",\"\n};\nconst TagsInput = factory((_props, ref) => {\n  const props = useProps(\"TagsInput\", defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    size,\n    value,\n    defaultValue,\n    onChange,\n    onKeyDown,\n    maxTags,\n    allowDuplicates,\n    onDuplicate,\n    variant,\n    data,\n    dropdownOpened,\n    defaultDropdownOpened,\n    onDropdownOpen,\n    onDropdownClose,\n    selectFirstOptionOnChange,\n    onOptionSubmit,\n    comboboxProps,\n    filter,\n    limit,\n    withScrollArea,\n    maxDropdownHeight,\n    searchValue,\n    defaultSearchValue,\n    onSearchChange,\n    readOnly,\n    disabled,\n    splitChars,\n    onFocus,\n    onBlur,\n    onPaste,\n    radius,\n    rightSection,\n    rightSectionWidth,\n    rightSectionPointerEvents,\n    rightSectionProps,\n    leftSection,\n    leftSectionWidth,\n    leftSectionPointerEvents,\n    leftSectionProps,\n    inputContainer,\n    inputWrapperOrder,\n    withAsterisk,\n    required,\n    labelProps,\n    descriptionProps,\n    errorProps,\n    wrapperProps,\n    description,\n    label,\n    error,\n    withErrorStyles,\n    name,\n    form,\n    id,\n    clearable,\n    clearButtonProps,\n    hiddenInputProps,\n    hiddenInputValuesDivider,\n    mod,\n    renderOption,\n    onRemove,\n    onClear,\n    scrollAreaProps,\n    ...others\n  } = props;\n  const _id = useId(id);\n  const parsedData = getParsedComboboxData(data);\n  const optionsLockup = getOptionsLockup(parsedData);\n  const combobox = useCombobox({\n    opened: dropdownOpened,\n    defaultOpened: defaultDropdownOpened,\n    onDropdownOpen,\n    onDropdownClose: () => {\n      onDropdownClose?.();\n      combobox.resetSelectedOption();\n    }\n  });\n  const {\n    styleProps,\n    rest: {\n      type,\n      autoComplete,\n      ...rest\n    }\n  } = extractStyleProps(others);\n  const [_value, setValue] = useUncontrolled({\n    value,\n    defaultValue,\n    finalValue: [],\n    onChange\n  });\n  const [_searchValue, setSearchValue] = useUncontrolled({\n    value: searchValue,\n    defaultValue: defaultSearchValue,\n    finalValue: \"\",\n    onChange: onSearchChange\n  });\n  const getStyles = useStyles({\n    name: \"TagsInput\",\n    classes: {},\n    props,\n    classNames,\n    styles,\n    unstyled\n  });\n  const {\n    resolvedClassNames,\n    resolvedStyles\n  } = useResolvedStylesApi({\n    props,\n    styles,\n    classNames\n  });\n  const handleInputKeydown = event => {\n    onKeyDown?.(event);\n    const inputValue = _searchValue.trim();\n    const {\n      length\n    } = inputValue;\n    if (splitChars.includes(event.key) && length > 0) {\n      setValue(getSplittedTags({\n        splitChars,\n        allowDuplicates,\n        maxTags,\n        value: _searchValue,\n        currentTags: _value\n      }));\n      setSearchValue(\"\");\n      event.preventDefault();\n    }\n    if (event.key === \"Enter\" && length > 0 && !event.nativeEvent.isComposing) {\n      event.preventDefault();\n      const isDuplicate = _value.some(tag => tag.toLowerCase() === inputValue.toLowerCase());\n      if (isDuplicate) {\n        onDuplicate?.(inputValue);\n      }\n      if ((!isDuplicate || isDuplicate && allowDuplicates) && _value.length < maxTags) {\n        onOptionSubmit?.(inputValue);\n        setSearchValue(\"\");\n        if (inputValue.length > 0) {\n          setValue([..._value, inputValue]);\n        }\n      }\n    }\n    if (event.key === \"Backspace\" && length === 0 && _value.length > 0 && !event.nativeEvent.isComposing) {\n      onRemove?.(_value[_value.length - 1]);\n      setValue(_value.slice(0, _value.length - 1));\n    }\n  };\n  const handlePaste = event => {\n    onPaste?.(event);\n    event.preventDefault();\n    if (event.clipboardData) {\n      const pastedText = event.clipboardData.getData(\"text/plain\");\n      setValue(getSplittedTags({\n        splitChars,\n        allowDuplicates,\n        maxTags,\n        value: pastedText,\n        currentTags: _value\n      }));\n      setSearchValue(\"\");\n    }\n  };\n  const values = _value.map((item, index) => /* @__PURE__ */jsx(Pill, {\n    withRemoveButton: !readOnly,\n    onRemove: () => {\n      setValue(_value.filter(i => item !== i));\n      onRemove?.(item);\n    },\n    unstyled,\n    disabled,\n    ...getStyles(\"pill\"),\n    children: item\n  }, `${item}-${index}`));\n  const clearButton = clearable && _value.length > 0 && !disabled && !readOnly && /* @__PURE__ */jsx(Combobox.ClearButton, {\n    size,\n    ...clearButtonProps,\n    onClear: () => {\n      setValue([]);\n      setSearchValue(\"\");\n      onClear?.();\n    }\n  });\n  return /* @__PURE__ */jsxs(Fragment, {\n    children: [/* @__PURE__ */jsxs(Combobox, {\n      store: combobox,\n      classNames: resolvedClassNames,\n      styles: resolvedStyles,\n      unstyled,\n      size,\n      readOnly,\n      __staticSelector: \"TagsInput\",\n      onOptionSubmit: val => {\n        onOptionSubmit?.(val);\n        setSearchValue(\"\");\n        _value.length < maxTags && setValue([..._value, optionsLockup[val].label]);\n      },\n      ...comboboxProps,\n      children: [/* @__PURE__ */jsx(Combobox.DropdownTarget, {\n        children: /* @__PURE__ */jsx(PillsInput, {\n          ...styleProps,\n          __staticSelector: \"TagsInput\",\n          classNames: resolvedClassNames,\n          styles: resolvedStyles,\n          unstyled,\n          size,\n          className,\n          style,\n          variant,\n          disabled,\n          radius,\n          rightSection: rightSection || clearButton,\n          rightSectionWidth,\n          rightSectionPointerEvents,\n          rightSectionProps,\n          leftSection,\n          leftSectionWidth,\n          leftSectionPointerEvents,\n          leftSectionProps,\n          inputContainer,\n          inputWrapperOrder,\n          withAsterisk,\n          required,\n          labelProps,\n          descriptionProps,\n          errorProps,\n          wrapperProps,\n          description,\n          label,\n          error,\n          multiline: true,\n          withErrorStyles,\n          __stylesApiProps: {\n            ...props,\n            multiline: true\n          },\n          id: _id,\n          mod,\n          children: /* @__PURE__ */jsxs(Pill.Group, {\n            disabled,\n            unstyled,\n            ...getStyles(\"pillsList\"),\n            children: [values, /* @__PURE__ */jsx(Combobox.EventsTarget, {\n              autoComplete,\n              children: /* @__PURE__ */jsx(PillsInput.Field, {\n                ...rest,\n                ref,\n                ...getStyles(\"inputField\"),\n                unstyled,\n                onKeyDown: handleInputKeydown,\n                onFocus: event => {\n                  onFocus?.(event);\n                  combobox.openDropdown();\n                },\n                onBlur: event => {\n                  onBlur?.(event);\n                  combobox.closeDropdown();\n                },\n                onPaste: handlePaste,\n                value: _searchValue,\n                onChange: event => setSearchValue(event.currentTarget.value),\n                required: required && _value.length === 0,\n                disabled,\n                readOnly,\n                id: _id\n              })\n            })]\n          })\n        })\n      }), /* @__PURE__ */jsx(OptionsDropdown, {\n        data: filterPickedTags({\n          data: parsedData,\n          value: _value\n        }),\n        hidden: readOnly || disabled,\n        filter,\n        search: _searchValue,\n        limit,\n        hiddenWhenEmpty: true,\n        withScrollArea,\n        maxDropdownHeight,\n        unstyled,\n        labelId: `${_id}-label`,\n        renderOption,\n        scrollAreaProps\n      })]\n    }), /* @__PURE__ */jsx(Combobox.HiddenInput, {\n      name,\n      form,\n      value: _value,\n      valuesDivider: hiddenInputValuesDivider,\n      disabled,\n      ...hiddenInputProps\n    })]\n  });\n});\nTagsInput.classes = {\n  ...InputBase.classes,\n  ...Combobox.classes\n};\nTagsInput.displayName = \"@mantine/core/TagsInput\";\nexport { TagsInput };","map":{"version":3,"mappings":"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","names":["defaultProps","maxTags","Infinity","allowDuplicates","splitChars","hiddenInputValuesDivider","TagsInput","factory","_props","ref","props","useProps","classNames","className","style","styles","unstyled","vars","size","value","defaultValue","onChange","onKeyDown","onDuplicate","variant","data","dropdownOpened","defaultDropdownOpened","onDropdownOpen","onDropdownClose","selectFirstOptionOnChange","onOptionSubmit","comboboxProps","filter","limit","withScrollArea","maxDropdownHeight","searchValue","defaultSearchValue","onSearchChange","readOnly","disabled","onFocus","onBlur","onPaste","radius","rightSection","rightSectionWidth","rightSectionPointerEvents","rightSectionProps","leftSection","leftSectionWidth","leftSectionPointerEvents","leftSectionProps","inputContainer","inputWrapperOrder","withAsterisk","required","labelProps","descriptionProps","errorProps","wrapperProps","description","label","error","withErrorStyles","name","form","id","clearable","clearButtonProps","hiddenInputProps","mod","renderOption","onRemove","onClear","scrollAreaProps","others","_id","useId","parsedData","getParsedComboboxData","optionsLockup","getOptionsLockup","combobox","useCombobox","opened","defaultOpened","resetSelectedOption","styleProps","rest","type","autoComplete","extractStyleProps","_value","setValue","useUncontrolled","finalValue","_searchValue","setSearchValue","getStyles","useStyles","classes","resolvedClassNames","resolvedStyles","useResolvedStylesApi","handleInputKeydown","event","inputValue","trim","length","includes","key","getSplittedTags","currentTags","preventDefault","nativeEvent","isComposing","isDuplicate","some","tag","toLowerCase","slice","handlePaste","clipboardData","pastedText","getData","values","map","item","index","jsx","Pill","withRemoveButton","i","children","clearButton","Combobox","ClearButton","jsxs","Fragment","store","__staticSelector","val","DropdownTarget","PillsInput","multiline","__stylesApiProps","Group","EventsTarget","Field","openDropdown","closeDropdown","currentTarget","OptionsDropdown","filterPickedTags","hidden","search","hiddenWhenEmpty","labelId","HiddenInput","valuesDivider","InputBase","displayName"],"sources":["/Users/tnkuseija/Desktop/poche/frontend/node_modules/@mantine/core/src/components/TagsInput/TagsInput.tsx"],"sourcesContent":["import { useId, useUncontrolled } from '@mantine/hooks';\nimport {\n  BoxProps,\n  ElementProps,\n  extractStyleProps,\n  factory,\n  Factory,\n  StylesApiProps,\n  useProps,\n  useResolvedStylesApi,\n  useStyles,\n} from '../../core';\nimport { __CloseButtonProps } from '../CloseButton';\nimport {\n  Combobox,\n  ComboboxLikeProps,\n  ComboboxLikeRenderOptionInput,\n  ComboboxLikeStylesNames,\n  ComboboxStringData,\n  ComboboxStringItem,\n  getOptionsLockup,\n  getParsedComboboxData,\n  OptionsDropdown,\n  useCombobox,\n} from '../Combobox';\nimport { __BaseInputProps, __InputStylesNames } from '../Input';\nimport { InputBase } from '../InputBase';\nimport { Pill } from '../Pill';\nimport { PillsInput } from '../PillsInput';\nimport { ScrollAreaProps } from '../ScrollArea';\nimport { filterPickedTags } from './filter-picked-tags';\nimport { getSplittedTags } from './get-splitted-tags';\n\nexport type TagsInputStylesNames =\n  | __InputStylesNames\n  | ComboboxLikeStylesNames\n  | 'pill'\n  | 'pillsList'\n  | 'inputField';\n\nexport interface TagsInputProps\n  extends BoxProps,\n    __BaseInputProps,\n    Omit<ComboboxLikeProps, 'data'>,\n    StylesApiProps<TagsInputFactory>,\n    ElementProps<'input', 'size' | 'value' | 'defaultValue' | 'onChange'> {\n  /** Data displayed in the dropdown */\n  data?: ComboboxStringData;\n\n  /** Controlled component value */\n  value?: string[];\n\n  /** Default value for uncontrolled component */\n  defaultValue?: string[];\n\n  /** Called when value changes */\n  onChange?: (value: string[]) => void;\n\n  /** Called when tag is removed */\n  onRemove?: (value: string) => void;\n\n  /** Called when the clear button is clicked */\n  onClear?: () => void;\n\n  /** Controlled search value */\n  searchValue?: string;\n\n  /** Default search value */\n  defaultSearchValue?: string;\n\n  /** Called when search changes */\n  onSearchChange?: (value: string) => void;\n\n  /** Maximum number of tags, `Infinity` by default */\n  maxTags?: number;\n\n  /** Determines whether duplicate tags are allowed, `false` by default */\n  allowDuplicates?: boolean;\n\n  /** Called when user tries to submit a duplicated tag */\n  onDuplicate?: (value: string) => void;\n\n  /** Characters that should trigger tags split, `[',']` by default */\n  splitChars?: string[];\n\n  /** Determines whether the clear button should be displayed in the right section when the component has value, `false` by default */\n  clearable?: boolean;\n\n  /** Props passed down to the clear button */\n  clearButtonProps?: __CloseButtonProps & ElementProps<'button'>;\n\n  /** Props passed down to the hidden input */\n  hiddenInputProps?: Omit<React.ComponentPropsWithoutRef<'input'>, 'value'>;\n\n  /** Divider used to separate values in the hidden input `value` attribute, `','` by default */\n  hiddenInputValuesDivider?: string;\n\n  /** A function to render content of the option, replaces the default content of the option */\n  renderOption?: (input: ComboboxLikeRenderOptionInput<ComboboxStringItem>) => React.ReactNode;\n\n  /** Props passed down to the underlying `ScrollArea` component in the dropdown */\n  scrollAreaProps?: ScrollAreaProps;\n}\n\nexport type TagsInputFactory = Factory<{\n  props: TagsInputProps;\n  ref: HTMLInputElement;\n  stylesNames: TagsInputStylesNames;\n}>;\n\nconst defaultProps: Partial<TagsInputProps> = {\n  maxTags: Infinity,\n  allowDuplicates: false,\n  splitChars: [','],\n  hiddenInputValuesDivider: ',',\n};\n\nexport const TagsInput = factory<TagsInputFactory>((_props, ref) => {\n  const props = useProps('TagsInput', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    size,\n    value,\n    defaultValue,\n    onChange,\n    onKeyDown,\n    maxTags,\n    allowDuplicates,\n    onDuplicate,\n    variant,\n    data,\n    dropdownOpened,\n    defaultDropdownOpened,\n    onDropdownOpen,\n    onDropdownClose,\n    selectFirstOptionOnChange,\n    onOptionSubmit,\n    comboboxProps,\n    filter,\n    limit,\n    withScrollArea,\n    maxDropdownHeight,\n    searchValue,\n    defaultSearchValue,\n    onSearchChange,\n    readOnly,\n    disabled,\n    splitChars,\n    onFocus,\n    onBlur,\n    onPaste,\n    radius,\n    rightSection,\n    rightSectionWidth,\n    rightSectionPointerEvents,\n    rightSectionProps,\n    leftSection,\n    leftSectionWidth,\n    leftSectionPointerEvents,\n    leftSectionProps,\n    inputContainer,\n    inputWrapperOrder,\n    withAsterisk,\n    required,\n    labelProps,\n    descriptionProps,\n    errorProps,\n    wrapperProps,\n    description,\n    label,\n    error,\n    withErrorStyles,\n    name,\n    form,\n    id,\n    clearable,\n    clearButtonProps,\n    hiddenInputProps,\n    hiddenInputValuesDivider,\n    mod,\n    renderOption,\n    onRemove,\n    onClear,\n    scrollAreaProps,\n    ...others\n  } = props;\n\n  const _id = useId(id);\n  const parsedData = getParsedComboboxData(data);\n  const optionsLockup = getOptionsLockup(parsedData);\n\n  const combobox = useCombobox({\n    opened: dropdownOpened,\n    defaultOpened: defaultDropdownOpened,\n    onDropdownOpen,\n    onDropdownClose: () => {\n      onDropdownClose?.();\n      combobox.resetSelectedOption();\n    },\n  });\n\n  const {\n    styleProps,\n    rest: { type, autoComplete, ...rest },\n  } = extractStyleProps(others);\n\n  const [_value, setValue] = useUncontrolled({\n    value,\n    defaultValue,\n    finalValue: [],\n    onChange,\n  });\n\n  const [_searchValue, setSearchValue] = useUncontrolled({\n    value: searchValue,\n    defaultValue: defaultSearchValue,\n    finalValue: '',\n    onChange: onSearchChange,\n  });\n\n  const getStyles = useStyles<TagsInputFactory>({\n    name: 'TagsInput',\n    classes: {} as any,\n    props,\n    classNames,\n    styles,\n    unstyled,\n  });\n\n  const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi<TagsInputFactory>({\n    props,\n    styles,\n    classNames,\n  });\n\n  const handleInputKeydown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    onKeyDown?.(event);\n\n    const inputValue = _searchValue.trim();\n    const { length } = inputValue;\n\n    if (splitChars!.includes(event.key) && length > 0) {\n      setValue(\n        getSplittedTags({\n          splitChars,\n          allowDuplicates,\n          maxTags,\n          value: _searchValue,\n          currentTags: _value,\n        })\n      );\n      setSearchValue('');\n      event.preventDefault();\n    }\n\n    if (event.key === 'Enter' && length > 0 && !event.nativeEvent.isComposing) {\n      event.preventDefault();\n      const isDuplicate = _value.some((tag) => tag.toLowerCase() === inputValue.toLowerCase());\n\n      if (isDuplicate) {\n        onDuplicate?.(inputValue);\n      }\n\n      if ((!isDuplicate || (isDuplicate && allowDuplicates)) && _value.length < maxTags!) {\n        onOptionSubmit?.(inputValue);\n        setSearchValue('');\n\n        if (inputValue.length > 0) {\n          setValue([..._value, inputValue]);\n        }\n      }\n    }\n\n    if (\n      event.key === 'Backspace' &&\n      length === 0 &&\n      _value.length > 0 &&\n      !event.nativeEvent.isComposing\n    ) {\n      onRemove?.(_value[_value.length - 1]);\n      setValue(_value.slice(0, _value.length - 1));\n    }\n  };\n\n  const handlePaste = (event: React.ClipboardEvent<HTMLInputElement>) => {\n    onPaste?.(event);\n    event.preventDefault();\n\n    if (event.clipboardData) {\n      const pastedText = event.clipboardData.getData('text/plain');\n      setValue(\n        getSplittedTags({\n          splitChars,\n          allowDuplicates,\n          maxTags,\n          value: pastedText,\n          currentTags: _value,\n        })\n      );\n      setSearchValue('');\n    }\n  };\n\n  const values = _value.map((item, index) => (\n    <Pill\n      key={`${item}-${index}`}\n      withRemoveButton={!readOnly}\n      onRemove={() => {\n        setValue(_value.filter((i) => item !== i));\n        onRemove?.(item);\n      }}\n      unstyled={unstyled}\n      disabled={disabled}\n      {...getStyles('pill')}\n    >\n      {item}\n    </Pill>\n  ));\n\n  const clearButton = clearable && _value.length > 0 && !disabled && !readOnly && (\n    <Combobox.ClearButton\n      size={size as string}\n      {...clearButtonProps}\n      onClear={() => {\n        setValue([]);\n        setSearchValue('');\n        onClear?.();\n      }}\n    />\n  );\n\n  return (\n    <>\n      <Combobox\n        store={combobox}\n        classNames={resolvedClassNames}\n        styles={resolvedStyles}\n        unstyled={unstyled}\n        size={size}\n        readOnly={readOnly}\n        __staticSelector=\"TagsInput\"\n        onOptionSubmit={(val) => {\n          onOptionSubmit?.(val);\n          setSearchValue('');\n          _value.length < maxTags! && setValue([..._value, optionsLockup[val].label]);\n        }}\n        {...comboboxProps}\n      >\n        <Combobox.DropdownTarget>\n          <PillsInput\n            {...styleProps}\n            __staticSelector=\"TagsInput\"\n            classNames={resolvedClassNames}\n            styles={resolvedStyles}\n            unstyled={unstyled}\n            size={size}\n            className={className}\n            style={style}\n            variant={variant}\n            disabled={disabled}\n            radius={radius}\n            rightSection={rightSection || clearButton}\n            rightSectionWidth={rightSectionWidth}\n            rightSectionPointerEvents={rightSectionPointerEvents}\n            rightSectionProps={rightSectionProps}\n            leftSection={leftSection}\n            leftSectionWidth={leftSectionWidth}\n            leftSectionPointerEvents={leftSectionPointerEvents}\n            leftSectionProps={leftSectionProps}\n            inputContainer={inputContainer}\n            inputWrapperOrder={inputWrapperOrder}\n            withAsterisk={withAsterisk}\n            required={required}\n            labelProps={labelProps}\n            descriptionProps={descriptionProps}\n            errorProps={errorProps}\n            wrapperProps={wrapperProps}\n            description={description}\n            label={label}\n            error={error}\n            multiline\n            withErrorStyles={withErrorStyles}\n            __stylesApiProps={{ ...props, multiline: true }}\n            id={_id}\n            mod={mod}\n          >\n            <Pill.Group disabled={disabled} unstyled={unstyled} {...getStyles('pillsList')}>\n              {values}\n              <Combobox.EventsTarget autoComplete={autoComplete}>\n                <PillsInput.Field\n                  {...rest}\n                  ref={ref}\n                  {...getStyles('inputField')}\n                  unstyled={unstyled}\n                  onKeyDown={handleInputKeydown}\n                  onFocus={(event) => {\n                    onFocus?.(event);\n                    combobox.openDropdown();\n                  }}\n                  onBlur={(event) => {\n                    onBlur?.(event);\n                    combobox.closeDropdown();\n                  }}\n                  onPaste={handlePaste}\n                  value={_searchValue}\n                  onChange={(event) => setSearchValue(event.currentTarget.value)}\n                  required={required && _value.length === 0}\n                  disabled={disabled}\n                  readOnly={readOnly}\n                  id={_id}\n                />\n              </Combobox.EventsTarget>\n            </Pill.Group>\n          </PillsInput>\n        </Combobox.DropdownTarget>\n\n        <OptionsDropdown\n          data={filterPickedTags({ data: parsedData, value: _value })}\n          hidden={readOnly || disabled}\n          filter={filter}\n          search={_searchValue}\n          limit={limit}\n          hiddenWhenEmpty\n          withScrollArea={withScrollArea}\n          maxDropdownHeight={maxDropdownHeight}\n          unstyled={unstyled}\n          labelId={`${_id}-label`}\n          renderOption={renderOption}\n          scrollAreaProps={scrollAreaProps}\n        />\n      </Combobox>\n      <Combobox.HiddenInput\n        name={name}\n        form={form}\n        value={_value}\n        valuesDivider={hiddenInputValuesDivider}\n        disabled={disabled}\n        {...hiddenInputProps}\n      />\n    </>\n  );\n});\n\nTagsInput.classes = { ...InputBase.classes, ...Combobox.classes };\nTagsInput.displayName = '@mantine/core/TagsInput';\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}