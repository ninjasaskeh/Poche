{"ast":null,"code":"'use client';\n\nimport { useState, useCallback, useMemo } from 'react';\nfunction useStateHistory(initialValue) {\n  const [state, setState] = useState({\n    history: [initialValue],\n    current: 0\n  });\n  const set = useCallback(val => setState(currentState => {\n    const nextState = [...currentState.history.slice(0, currentState.current + 1), val];\n    return {\n      history: nextState,\n      current: nextState.length - 1\n    };\n  }), []);\n  const back = useCallback(function () {\n    let steps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    return setState(currentState => ({\n      history: currentState.history,\n      current: Math.max(0, currentState.current - steps)\n    }));\n  }, []);\n  const forward = useCallback(function () {\n    let steps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    return setState(currentState => ({\n      history: currentState.history,\n      current: Math.min(currentState.history.length - 1, currentState.current + steps)\n    }));\n  }, []);\n  const handlers = useMemo(() => ({\n    set,\n    forward,\n    back\n  }), []);\n  return [state.history[state.current], handlers, state];\n}\nexport { useStateHistory };","map":{"version":3,"mappings":";;;AAEO,SAASA,eAAe,CAACC,YAAY,EAAE;EAC5C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGC,QAAQ,CAAC;IACjCC,OAAO,EAAE,CAACJ,YAAY,CAAC;IACvBK,OAAO,EAAE;EACb,CAAG,CAAC;EACF,MAAMC,GAAG,GAAGC,WAAW,CACpBC,GAAG,IAAKN,QAAQ,CAAEO,YAAY,IAAK;IAClC,MAAMC,SAAS,GAAG,CAAC,GAAGD,YAAY,CAACL,OAAO,CAACO,KAAK,CAAC,CAAC,EAAEF,YAAY,CAACJ,OAAO,GAAG,CAAC,CAAC,EAAEG,GAAG,CAAC;IACnF,OAAO;MACLJ,OAAO,EAAEM,SAAS;MAClBL,OAAO,EAAEK,SAAS,CAACE,MAAM,GAAG;IACpC,CAAO;EACP,CAAK,CAAC,EACF,EAAE,CACH;EACD,MAAMC,IAAI,GAAGN,WAAW,CACtB;IAAA,IAACO,KAAK,uEAAG,CAAC;IAAA,OAAKZ,QAAQ,CAAEO,YAAY,KAAM;MACzCL,OAAO,EAAEK,YAAY,CAACL,OAAO;MAC7BC,OAAO,EAAEU,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEP,YAAY,CAACJ,OAAO,GAAGS,KAAK;IACvD,CAAK,CAAC,CAAC;EAAA,GACH,EAAE,CACH;EACD,MAAMG,OAAO,GAAGV,WAAW,CACzB;IAAA,IAACO,KAAK,uEAAG,CAAC;IAAA,OAAKZ,QAAQ,CAAEO,YAAY,KAAM;MACzCL,OAAO,EAAEK,YAAY,CAACL,OAAO;MAC7BC,OAAO,EAAEU,IAAI,CAACG,GAAG,CAACT,YAAY,CAACL,OAAO,CAACQ,MAAM,GAAG,CAAC,EAAEH,YAAY,CAACJ,OAAO,GAAGS,KAAK;IACrF,CAAK,CAAC,CAAC;EAAA,GACH,EAAE,CACH;EACD,MAAMK,QAAQ,GAAGC,OAAO,CAAC,OAAO;IAAEd,GAAG;IAAEW,OAAO;IAAEJ;EAAI,CAAE,CAAC,EAAE,EAAE,CAAC;EAC5D,OAAO,CAACZ,KAAK,CAACG,OAAO,CAACH,KAAK,CAACI,OAAO,CAAC,EAAEc,QAAQ,EAAElB,KAAK,CAAC;AACxD","names":["useStateHistory","initialValue","state","setState","useState","history","current","set","useCallback","val","currentState","nextState","slice","length","back","steps","Math","max","forward","min","handlers","useMemo"],"sources":["/Users/tnkuseija/Desktop/poche/frontend/node_modules/@mantine/hooks/src/use-state-history/use-state-history.ts"],"sourcesContent":["import { useCallback, useMemo, useState } from 'react';\n\nexport interface UseStateHistoryHandlers<T> {\n  set: (value: T) => void;\n  back: (steps?: number) => void;\n  forward: (steps?: number) => void;\n}\n\nexport interface StateHistory<T> {\n  history: T[];\n  current: number;\n}\n\nexport function useStateHistory<T>(\n  initialValue: T\n): [T, UseStateHistoryHandlers<T>, StateHistory<T>] {\n  const [state, setState] = useState<StateHistory<T>>({\n    history: [initialValue],\n    current: 0,\n  });\n\n  const set = useCallback(\n    (val: T) =>\n      setState((currentState) => {\n        const nextState = [...currentState.history.slice(0, currentState.current + 1), val];\n        return {\n          history: nextState,\n          current: nextState.length - 1,\n        };\n      }),\n    []\n  );\n\n  const back = useCallback(\n    (steps = 1) =>\n      setState((currentState) => ({\n        history: currentState.history,\n        current: Math.max(0, currentState.current - steps),\n      })),\n    []\n  );\n\n  const forward = useCallback(\n    (steps = 1) =>\n      setState((currentState) => ({\n        history: currentState.history,\n        current: Math.min(currentState.history.length - 1, currentState.current + steps),\n      })),\n    []\n  );\n\n  const handlers = useMemo(() => ({ set, forward, back }), []);\n\n  return [state.history[state.current], handlers, state];\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}