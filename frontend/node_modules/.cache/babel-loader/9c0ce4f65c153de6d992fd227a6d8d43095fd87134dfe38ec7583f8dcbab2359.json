{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { cloneElement } from 'react';\nimport { useFocusTrap, useMergedRef } from '@mantine/hooks';\nimport { isElement } from '../../core/utils/is-element/is-element.mjs';\nimport 'clsx';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport '../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport '../../core/Box/Box.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport { VisuallyHidden } from '../VisuallyHidden/VisuallyHidden.mjs';\nfunction FocusTrap(_ref) {\n  let {\n    children,\n    active = true,\n    refProp = \"ref\"\n  } = _ref;\n  const focusTrapRef = useFocusTrap(active);\n  const ref = useMergedRef(focusTrapRef, children?.ref);\n  if (!isElement(children)) {\n    return children;\n  }\n  return cloneElement(children, {\n    [refProp]: ref\n  });\n}\nfunction FocusTrapInitialFocus(props) {\n  return /* @__PURE__ */jsx(VisuallyHidden, {\n    tabIndex: -1,\n    \"data-autofocus\": true,\n    ...props\n  });\n}\nFocusTrap.displayName = \"@mantine/core/FocusTrap\";\nFocusTrapInitialFocus.displayName = \"@mantine/core/FocusTrapInitialFocus\";\nFocusTrap.InitialFocus = FocusTrapInitialFocus;\nexport { FocusTrap, FocusTrapInitialFocus };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;AAMO,SAASA,SAAS,OAItB;EAAA,IAJuB;IACxBC,QAAQ;IACRC,MAAM,GAAG,IAAI;IACbC,OAAO,GAAG;EACZ,CAAC;EACC,MAAMC,YAAY,GAAGC,YAAY,CAACH,MAAM,CAAC;EACzC,MAAMI,GAAG,GAAGC,YAAY,CAACH,YAAY,EAAEH,QAAQ,EAAEK,GAAG,CAAC;EACrD,IAAI,CAACE,SAAS,CAACP,QAAQ,CAAC,EAAE;IACxB,OAAOA,QAAQ;EAChB;EACD,OAAOQ,YAAY,CAACR,QAAQ,EAAE;IAAE,CAACE,OAAO,GAAGG;EAAK,EAAC;AACnD;AACO,SAASI,qBAAqB,CAACC,KAAK,EAAE;EAC3C,sBAAuBC,GAAG,CAACC,cAAc,EAAE;IAAEC,QAAQ,EAAE,CAAC,CAAC;IAAE,gBAAgB,EAAE,IAAI;IAAE,GAAGH;EAAK,CAAE,CAAC;AAChG;AACAX,SAAS,CAACe,WAAW,GAAG,yBAAyB;AACjDL,qBAAqB,CAACK,WAAW,GAAG,qCAAqC;AACzEf,SAAS,CAACgB,YAAY,GAAGN,qBAAqB","names":["FocusTrap","children","active","refProp","focusTrapRef","useFocusTrap","ref","useMergedRef","isElement","cloneElement","FocusTrapInitialFocus","props","jsx","VisuallyHidden","tabIndex","displayName","InitialFocus"],"sources":["/Users/tnkuseija/Desktop/poche/frontend/node_modules/@mantine/core/src/components/FocusTrap/FocusTrap.tsx"],"sourcesContent":["import { cloneElement } from 'react';\nimport { useFocusTrap, useMergedRef } from '@mantine/hooks';\nimport { isElement } from '../../core';\nimport { VisuallyHidden } from '../VisuallyHidden';\n\nexport interface FocusTrapProps {\n  /** Element at which focus should be trapped, should support ref prop */\n  children: any;\n\n  /** Determines whether focus should be trapped within child element */\n  active?: boolean;\n\n  /** Prop that should be used to access component ref */\n  refProp?: string;\n}\n\nexport function FocusTrap({\n  children,\n  active = true,\n  refProp = 'ref',\n}: FocusTrapProps): React.ReactElement {\n  const focusTrapRef = useFocusTrap(active);\n  const ref = useMergedRef(focusTrapRef, children?.ref);\n\n  if (!isElement(children)) {\n    return children;\n  }\n\n  return cloneElement(children, { [refProp]: ref });\n}\n\nexport function FocusTrapInitialFocus(props: React.ComponentPropsWithoutRef<'span'>) {\n  return <VisuallyHidden tabIndex={-1} data-autofocus {...props} />;\n}\n\nFocusTrap.displayName = '@mantine/core/FocusTrap';\nFocusTrapInitialFocus.displayName = '@mantine/core/FocusTrapInitialFocus';\nFocusTrap.InitialFocus = FocusTrapInitialFocus;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}